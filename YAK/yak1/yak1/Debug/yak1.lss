
yak1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000242  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000a  00800100  00800100  000002b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b16  00000000  00000000  0000038c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000893  00000000  00000000  00000ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002df  00000000  00000000  00001735  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001a14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000482  00000000  00000000  00001af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001fa  00000000  00000000  00001f72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  0000216c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	9a c0       	rjmp	.+308    	; 0x13a <__vector_1>
   6:	00 00       	nop
   8:	ac c0       	rjmp	.+344    	; 0x162 <__vector_2>
   a:	00 00       	nop
   c:	4f c0       	rjmp	.+158    	; 0xac <__bad_interrupt>
   e:	00 00       	nop
  10:	4d c0       	rjmp	.+154    	; 0xac <__bad_interrupt>
  12:	00 00       	nop
  14:	4b c0       	rjmp	.+150    	; 0xac <__bad_interrupt>
  16:	00 00       	nop
  18:	49 c0       	rjmp	.+146    	; 0xac <__bad_interrupt>
  1a:	00 00       	nop
  1c:	47 c0       	rjmp	.+142    	; 0xac <__bad_interrupt>
  1e:	00 00       	nop
  20:	45 c0       	rjmp	.+138    	; 0xac <__bad_interrupt>
  22:	00 00       	nop
  24:	43 c0       	rjmp	.+134    	; 0xac <__bad_interrupt>
  26:	00 00       	nop
  28:	41 c0       	rjmp	.+130    	; 0xac <__bad_interrupt>
  2a:	00 00       	nop
  2c:	3f c0       	rjmp	.+126    	; 0xac <__bad_interrupt>
  2e:	00 00       	nop
  30:	3d c0       	rjmp	.+122    	; 0xac <__bad_interrupt>
  32:	00 00       	nop
  34:	3b c0       	rjmp	.+118    	; 0xac <__bad_interrupt>
  36:	00 00       	nop
  38:	39 c0       	rjmp	.+114    	; 0xac <__bad_interrupt>
  3a:	00 00       	nop
  3c:	37 c0       	rjmp	.+110    	; 0xac <__bad_interrupt>
  3e:	00 00       	nop
  40:	35 c0       	rjmp	.+106    	; 0xac <__bad_interrupt>
  42:	00 00       	nop
  44:	33 c0       	rjmp	.+102    	; 0xac <__bad_interrupt>
  46:	00 00       	nop
  48:	31 c0       	rjmp	.+98     	; 0xac <__bad_interrupt>
  4a:	00 00       	nop
  4c:	2f c0       	rjmp	.+94     	; 0xac <__bad_interrupt>
  4e:	00 00       	nop
  50:	2d c0       	rjmp	.+90     	; 0xac <__bad_interrupt>
  52:	00 00       	nop
  54:	2b c0       	rjmp	.+86     	; 0xac <__bad_interrupt>
  56:	00 00       	nop
  58:	29 c0       	rjmp	.+82     	; 0xac <__bad_interrupt>
  5a:	00 00       	nop
  5c:	27 c0       	rjmp	.+78     	; 0xac <__bad_interrupt>
  5e:	00 00       	nop
  60:	25 c0       	rjmp	.+74     	; 0xac <__bad_interrupt>
  62:	00 00       	nop
  64:	23 c0       	rjmp	.+70     	; 0xac <__bad_interrupt>
  66:	00 00       	nop
  68:	21 c0       	rjmp	.+66     	; 0xac <__bad_interrupt>
  6a:	00 00       	nop
  6c:	1f c0       	rjmp	.+62     	; 0xac <__bad_interrupt>
  6e:	00 00       	nop
  70:	1d c0       	rjmp	.+58     	; 0xac <__bad_interrupt>
  72:	00 00       	nop
  74:	1b c0       	rjmp	.+54     	; 0xac <__bad_interrupt>
  76:	00 00       	nop
  78:	19 c0       	rjmp	.+50     	; 0xac <__bad_interrupt>
  7a:	00 00       	nop
  7c:	17 c0       	rjmp	.+46     	; 0xac <__bad_interrupt>
  7e:	00 00       	nop
  80:	15 c0       	rjmp	.+42     	; 0xac <__bad_interrupt>
  82:	00 00       	nop
  84:	13 c0       	rjmp	.+38     	; 0xac <__bad_interrupt>
  86:	00 00       	nop
  88:	11 c0       	rjmp	.+34     	; 0xac <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_clear_bss>:
  98:	21 e0       	ldi	r18, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
  a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
  a2:	aa 30       	cpi	r26, 0x0A	; 10
  a4:	b2 07       	cpc	r27, r18
  a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
  a8:	7c d0       	rcall	.+248    	; 0x1a2 <main>
  aa:	c9 c0       	rjmp	.+402    	; 0x23e <_exit>

000000ac <__bad_interrupt>:
  ac:	a9 cf       	rjmp	.-174    	; 0x0 <__vectors>

000000ae <motorA>:
{
	while(!(UCSR0A & 0x80));
	//수신완료 flag 비트가 1되면 정지
	return UDR0;
	//UART0번 사용
}
  ae:	8c e1       	ldi	r24, 0x1C	; 28
  b0:	9c e0       	ldi	r25, 0x0C	; 12
  b2:	9b bd       	out	0x2b, r25	; 43
  b4:	8a bd       	out	0x2a, r24	; 42
  b6:	2f ef       	ldi	r18, 0xFF	; 255
  b8:	83 ed       	ldi	r24, 0xD3	; 211
  ba:	90 e3       	ldi	r25, 0x30	; 48
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <motorA+0xe>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <motorA+0x18>
  c6:	00 00       	nop
  c8:	88 ee       	ldi	r24, 0xE8	; 232
  ca:	93 e0       	ldi	r25, 0x03	; 3
  cc:	9b bd       	out	0x2b, r25	; 43
  ce:	8a bd       	out	0x2a, r24	; 42
  d0:	2f ef       	ldi	r18, 0xFF	; 255
  d2:	83 ed       	ldi	r24, 0xD3	; 211
  d4:	90 e3       	ldi	r25, 0x30	; 48
  d6:	21 50       	subi	r18, 0x01	; 1
  d8:	80 40       	sbci	r24, 0x00	; 0
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	e1 f7       	brne	.-8      	; 0xd6 <motorA+0x28>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <motorA+0x32>
  e0:	00 00       	nop
  e2:	08 95       	ret

000000e4 <motorB>:
  e4:	8c e1       	ldi	r24, 0x1C	; 28
  e6:	9c e0       	ldi	r25, 0x0C	; 12
  e8:	99 bd       	out	0x29, r25	; 41
  ea:	88 bd       	out	0x28, r24	; 40
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	83 ed       	ldi	r24, 0xD3	; 211
  f0:	90 e3       	ldi	r25, 0x30	; 48
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <motorB+0xe>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <motorB+0x18>
  fc:	00 00       	nop
  fe:	88 ee       	ldi	r24, 0xE8	; 232
 100:	93 e0       	ldi	r25, 0x03	; 3
 102:	99 bd       	out	0x29, r25	; 41
 104:	88 bd       	out	0x28, r24	; 40
 106:	2f ef       	ldi	r18, 0xFF	; 255
 108:	83 ed       	ldi	r24, 0xD3	; 211
 10a:	90 e3       	ldi	r25, 0x30	; 48
 10c:	21 50       	subi	r18, 0x01	; 1
 10e:	80 40       	sbci	r24, 0x00	; 0
 110:	90 40       	sbci	r25, 0x00	; 0
 112:	e1 f7       	brne	.-8      	; 0x10c <motorB+0x28>
 114:	00 c0       	rjmp	.+0      	; 0x116 <motorB+0x32>
 116:	00 00       	nop
 118:	08 95       	ret

0000011a <motorC>:
 11a:	8c e1       	ldi	r24, 0x1C	; 28
 11c:	9c e0       	ldi	r25, 0x0C	; 12
 11e:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 122:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 126:	2f ef       	ldi	r18, 0xFF	; 255
 128:	83 ed       	ldi	r24, 0xD3	; 211
 12a:	90 e3       	ldi	r25, 0x30	; 48
 12c:	21 50       	subi	r18, 0x01	; 1
 12e:	80 40       	sbci	r24, 0x00	; 0
 130:	90 40       	sbci	r25, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <motorC+0x12>
 134:	00 c0       	rjmp	.+0      	; 0x136 <motorC+0x1c>
 136:	00 00       	nop
 138:	08 95       	ret

0000013a <__vector_1>:
 13a:	1f 92       	push	r1
 13c:	0f 92       	push	r0
 13e:	0f b6       	in	r0, 0x3f	; 63
 140:	0f 92       	push	r0
 142:	11 24       	eor	r1, r1
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <check0+0x1>
 150:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <check0>
 154:	9f 91       	pop	r25
 156:	8f 91       	pop	r24
 158:	0f 90       	pop	r0
 15a:	0f be       	out	0x3f, r0	; 63
 15c:	0f 90       	pop	r0
 15e:	1f 90       	pop	r1
 160:	18 95       	reti

00000162 <__vector_2>:
 162:	1f 92       	push	r1
 164:	0f 92       	push	r0
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	0f 92       	push	r0
 16a:	11 24       	eor	r1, r1
 16c:	8f 93       	push	r24
 16e:	9f 93       	push	r25
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <check1+0x1>
 178:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <check1>
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <uart_init>:
 18a:	1b b8       	out	0x0b, r1	; 11
 18c:	88 e1       	ldi	r24, 0x18	; 24
 18e:	8a b9       	out	0x0a, r24	; 10
 190:	86 e0       	ldi	r24, 0x06	; 6
 192:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 196:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 19a:	87 e6       	ldi	r24, 0x67	; 103
 19c:	89 b9       	out	0x09, r24	; 9
 19e:	78 94       	sei
 1a0:	08 95       	ret

000001a2 <main>:

int main(void)
{
	DDRB=0b11100000;   // PB567 out
 1a2:	80 ee       	ldi	r24, 0xE0	; 224
 1a4:	87 bb       	out	0x17, r24	; 23
	TCCR1A=0b10101010; TCCR1B=0x1A;  ICR1=19999; // OCR1A -> OC Clear / Fast PWM TOP = ICR1 / 8분주
 1a6:	8a ea       	ldi	r24, 0xAA	; 170
 1a8:	8f bd       	out	0x2f, r24	; 47
 1aa:	8a e1       	ldi	r24, 0x1A	; 26
 1ac:	8e bd       	out	0x2e, r24	; 46
 1ae:	8f e1       	ldi	r24, 0x1F	; 31
 1b0:	9e e4       	ldi	r25, 0x4E	; 78
 1b2:	97 bd       	out	0x27, r25	; 39
 1b4:	86 bd       	out	0x26, r24	; 38
	//OCR1A=3000; OCR1B=3000;
	// TCCR1B=0x1A; OCR1A=3000; ICR1=19999;
	uart_init();
 1b6:	e9 df       	rcall	.-46     	; 0x18a <uart_init>

	// External Interrupt(s) initialization
	EICRA=0b00001010; //외부인터럽트 01번핀 트리거 신호를  falling edge 설정
 1b8:	8a e0       	ldi	r24, 0x0A	; 10
 1ba:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB=0x00; 
 1be:	1a be       	out	0x3a, r1	; 58
	EIMSK=0x03; //INT0 1번핀을 외부인터럽트 핀으로 설정, 0 1번 외부인터럽트 활성화	
 1c0:	83 e0       	ldi	r24, 0x03	; 3
 1c2:	89 bf       	out	0x39, r24	; 57
	
	sei();
 1c4:	78 94       	sei
	

	while(1)
	{
		// 약을 체크하는 코드 넣어야 함 (check_yak 변하게)
		if(check_yak == 1)
 1c6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <check_yak>
 1ca:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <check_yak+0x1>
 1ce:	01 97       	sbiw	r24, 0x01	; 1
 1d0:	d1 f7       	brne	.-12     	; 0x1c6 <main+0x24>
		{
			// 어플에서 시간이 맞으면 블루투스로 받아서 check_time 변하게 해야함 
			if(check_time == 1)
 1d2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <check_time>
 1d6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <check_time+0x1>
 1da:	01 97       	sbiw	r24, 0x01	; 1
 1dc:	a1 f7       	brne	.-24     	; 0x1c6 <main+0x24>
			{
				/*주요 로직*/
				switch(motor_sel)
 1de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 1e2:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	91 05       	cpc	r25, r1
 1ea:	49 f0       	breq	.+18     	; 0x1fe <main+0x5c>
 1ec:	02 97       	sbiw	r24, 0x02	; 2
 1ee:	f1 f4       	brne	.+60     	; 0x22c <main+0x8a>
						}	// 약이 떨어질 때 까지 motorA 돌리기
						motorC();	// 잠금장치 풀기
						break;
					
					case 2 :
						while (check1 == 0)
 1f0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <check1>
 1f4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <check1+0x1>
 1f8:	89 2b       	or	r24, r25
 1fa:	81 f0       	breq	.+32     	; 0x21c <main+0x7a>
 1fc:	16 c0       	rjmp	.+44     	; 0x22a <main+0x88>
			{
				/*주요 로직*/
				switch(motor_sel)
				{
					case 1 :
						while (check0 == 0)
 1fe:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <check0>
 202:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <check0+0x1>
 206:	89 2b       	or	r24, r25
						{
							motorA();
 208:	39 f4       	brne	.+14     	; 0x218 <main+0x76>
 20a:	51 df       	rcall	.-350    	; 0xae <motorA>
			{
				/*주요 로직*/
				switch(motor_sel)
				{
					case 1 :
						while (check0 == 0)
 20c:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <check0>
 210:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <check0+0x1>
 214:	89 2b       	or	r24, r25
						{
							motorA();
						}	// 약이 떨어질 때 까지 motorA 돌리기
						motorC();	// 잠금장치 풀기
 216:	c9 f3       	breq	.-14     	; 0x20a <main+0x68>
						break;
 218:	80 df       	rcall	.-256    	; 0x11a <motorC>
					
					case 2 :
						while (check1 == 0)
						{
							motorB();
 21a:	08 c0       	rjmp	.+16     	; 0x22c <main+0x8a>
 21c:	63 df       	rcall	.-314    	; 0xe4 <motorB>
						}	// 약이 떨어질 때 까지 motorA 돌리기
						motorC();	// 잠금장치 풀기
						break;
					
					case 2 :
						while (check1 == 0)
 21e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <check1>
 222:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <check1+0x1>
 226:	89 2b       	or	r24, r25
						{
							motorB();
						}	// 약이 떨어질 때 까지 motorB 돌리기
						motorC();	// 잠금장치 풀기
 228:	c9 f3       	breq	.-14     	; 0x21c <main+0x7a>
 22a:	77 df       	rcall	.-274    	; 0x11a <motorC>
						break;
					
					default:
						break;
				}
				check0=0; check1=0;	// 다시 약 체크상황 없는걸로 초기화
 22c:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <check0+0x1>
 230:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <check0>
 234:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <check1+0x1>
 238:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <check1>
 23c:	c4 cf       	rjmp	.-120    	; 0x1c6 <main+0x24>

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
