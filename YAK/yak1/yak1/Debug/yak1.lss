
yak1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800100  000005dc  00000670  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005dc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080012e  0080012e  0000069e  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  0000069e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000700  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000158  00000000  00000000  0000073c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000018f8  00000000  00000000  00000894  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d64  00000000  00000000  0000218c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf1  00000000  00000000  00002ef0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000378  00000000  00000000  00003be4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000668  00000000  00000000  00003f5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000124a  00000000  00000000  000045c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  0000580e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ea c1       	rjmp	.+980    	; 0x3f2 <__vector_7>
  1e:	00 00       	nop
  20:	fc c1       	rjmp	.+1016   	; 0x41a <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	ec ed       	ldi	r30, 0xDC	; 220
  a0:	f5 e0       	ldi	r31, 0x05	; 5
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ae 32       	cpi	r26, 0x2E	; 46
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ae e2       	ldi	r26, 0x2E	; 46
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 33       	cpi	r26, 0x39	; 57
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	cf d1       	rcall	.+926    	; 0x462 <main>
  c4:	89 c2       	rjmp	.+1298   	; 0x5d8 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <i2c_lcd_command_8>:
	
	// printf("Connect Ok\r\n");
}

void i2c_lcd_command_8(uint8_t command)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <i2c_lcd_command_8+0x6>
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	uint8_t c_buf[2];
	
	c_buf[0] = (command&0xF0) | RS0_EN1 | BackLight;
  d2:	80 7f       	andi	r24, 0xF0	; 240
  d4:	98 2f       	mov	r25, r24
  d6:	9c 60       	ori	r25, 0x0C	; 12
  d8:	99 83       	std	Y+1, r25	; 0x01
	c_buf[1] = (command&0xF0) | RS0_EN0 | BackLight;
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	8a 83       	std	Y+2, r24	; 0x02
	
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
  de:	42 e0       	ldi	r20, 0x02	; 2
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	be 01       	movw	r22, r28
  e4:	6f 5f       	subi	r22, 0xFF	; 255
  e6:	7f 4f       	sbci	r23, 0xFF	; 255
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
  ec:	0a d1       	rcall	.+532    	; 0x302 <i2c_transmit>
  ee:	81 11       	cpse	r24, r1
  f0:	f6 cf       	rjmp	.-20     	; 0xde <i2c_lcd_command_8+0x16>
}
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <i2c_lcd_command>:

void i2c_lcd_command(uint8_t command)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	00 d0       	rcall	.+0      	; 0x102 <i2c_lcd_command+0x6>
 102:	00 d0       	rcall	.+0      	; 0x104 <i2c_lcd_command+0x8>
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
	uint8_t c_buf[4];
	
	c_buf[0] = (command &0xF0) | RS0_EN1 | BackLight;
 108:	98 2f       	mov	r25, r24
 10a:	90 7f       	andi	r25, 0xF0	; 240
 10c:	29 2f       	mov	r18, r25
 10e:	2c 60       	ori	r18, 0x0C	; 12
 110:	29 83       	std	Y+1, r18	; 0x01
	c_buf[1] = (command &0xF0) | RS0_EN0 | BackLight;
 112:	98 60       	ori	r25, 0x08	; 8
 114:	9a 83       	std	Y+2, r25	; 0x02
	
	c_buf[2] = ((command <<4)&0xF0) | RS0_EN1 | BackLight;
 116:	20 e1       	ldi	r18, 0x10	; 16
 118:	82 9f       	mul	r24, r18
 11a:	c0 01       	movw	r24, r0
 11c:	11 24       	eor	r1, r1
 11e:	98 2f       	mov	r25, r24
 120:	9c 60       	ori	r25, 0x0C	; 12
 122:	9b 83       	std	Y+3, r25	; 0x03
	c_buf[3] = ((command <<4)&0xF0) | RS0_EN0 | BackLight;
 124:	88 60       	ori	r24, 0x08	; 8
 126:	8c 83       	std	Y+4, r24	; 0x04
	
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
 128:	44 e0       	ldi	r20, 0x04	; 4
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	be 01       	movw	r22, r28
 12e:	6f 5f       	subi	r22, 0xFF	; 255
 130:	7f 4f       	sbci	r23, 0xFF	; 255
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 136:	e5 d0       	rcall	.+458    	; 0x302 <i2c_transmit>
 138:	81 11       	cpse	r24, r1
 13a:	f6 cf       	rjmp	.-20     	; 0x128 <i2c_lcd_command+0x2c>
}
 13c:	0f 90       	pop	r0
 13e:	0f 90       	pop	r0
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <i2c_lcd_init>:

uint8_t I2C_addr_PCF8574 = (0x27 << 1);

void i2c_lcd_init(void)
{
	i2c_init();
 14a:	a0 d0       	rcall	.+320    	; 0x28c <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	89 e6       	ldi	r24, 0x69	; 105
 150:	98 e1       	ldi	r25, 0x18	; 24
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <i2c_lcd_init+0x8>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <i2c_lcd_init+0x12>
 15c:	00 00       	nop
	_delay_ms(500);

	// printf("Before Initialize... \r\n");
	i2c_lcd_command_8(0x30); _delay_ms(5);
 15e:	80 e3       	ldi	r24, 0x30	; 48
 160:	b3 df       	rcall	.-154    	; 0xc8 <i2c_lcd_command_8>
 162:	8f e1       	ldi	r24, 0x1F	; 31
 164:	9e e4       	ldi	r25, 0x4E	; 78
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <i2c_lcd_init+0x1c>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <i2c_lcd_init+0x22>
	i2c_lcd_command_8(0x30); _delay_us(100);
 16c:	00 00       	nop
 16e:	80 e3       	ldi	r24, 0x30	; 48
 170:	ab df       	rcall	.-170    	; 0xc8 <i2c_lcd_command_8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	8f e8       	ldi	r24, 0x8F	; 143
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <i2c_lcd_init+0x2c>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <i2c_lcd_init+0x32>
	i2c_lcd_command_8(0x30); _delay_us(100);
 17c:	00 00       	nop
 17e:	80 e3       	ldi	r24, 0x30	; 48
 180:	a3 df       	rcall	.-186    	; 0xc8 <i2c_lcd_command_8>
 182:	8f e8       	ldi	r24, 0x8F	; 143
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <i2c_lcd_init+0x3c>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <i2c_lcd_init+0x42>
	i2c_lcd_command_8(0x20); _delay_us(100);
 18c:	00 00       	nop
 18e:	80 e2       	ldi	r24, 0x20	; 32
 190:	9b df       	rcall	.-202    	; 0xc8 <i2c_lcd_command_8>
 192:	8f e8       	ldi	r24, 0x8F	; 143
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <i2c_lcd_init+0x4c>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <i2c_lcd_init+0x52>
	
	i2c_lcd_command(0x28); _delay_us(50);
 19c:	00 00       	nop
 19e:	88 e2       	ldi	r24, 0x28	; 40
 1a0:	ad df       	rcall	.-166    	; 0xfc <i2c_lcd_command>
 1a2:	87 ec       	ldi	r24, 0xC7	; 199
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <i2c_lcd_init+0x5c>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <i2c_lcd_init+0x62>
	i2c_lcd_command(0x08); _delay_us(50);
 1ac:	00 00       	nop
 1ae:	88 e0       	ldi	r24, 0x08	; 8
 1b0:	a5 df       	rcall	.-182    	; 0xfc <i2c_lcd_command>
 1b2:	87 ec       	ldi	r24, 0xC7	; 199
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <i2c_lcd_init+0x6c>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <i2c_lcd_init+0x72>
	i2c_lcd_command(0x01); _delay_ms(3);
 1bc:	00 00       	nop
 1be:	81 e0       	ldi	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	9d df       	rcall	.-198    	; 0xfc <i2c_lcd_command>
 1c2:	8f ed       	ldi	r24, 0xDF	; 223
 1c4:	9e e2       	ldi	r25, 0x2E	; 46
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <i2c_lcd_init+0x7c>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <i2c_lcd_init+0x82>
	i2c_lcd_command(0x06); _delay_us(50);
 1cc:	00 00       	nop
 1ce:	86 e0       	ldi	r24, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d0:	95 df       	rcall	.-214    	; 0xfc <i2c_lcd_command>
 1d2:	87 ec       	ldi	r24, 0xC7	; 199
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <i2c_lcd_init+0x8c>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <i2c_lcd_init+0x92>
	i2c_lcd_command(0x0C); _delay_us(50);
 1dc:	00 00       	nop
 1de:	8c e0       	ldi	r24, 0x0C	; 12
 1e0:	8d df       	rcall	.-230    	; 0xfc <i2c_lcd_command>
 1e2:	87 ec       	ldi	r24, 0xC7	; 199
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <i2c_lcd_init+0x9c>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <i2c_lcd_init+0xa2>
 1ec:	00 00       	nop
 1ee:	08 95       	ret

000001f0 <i2c_lcd_data>:
	
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
}

void i2c_lcd_data(uint8_t data)
{
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	00 d0       	rcall	.+0      	; 0x1f6 <i2c_lcd_data+0x6>
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <i2c_lcd_data+0x8>
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
	uint8_t d_buf[4];
	
	d_buf[0] = (data &0xF0) | RS1_EN1 | BackLight;
 1fc:	98 2f       	mov	r25, r24
 1fe:	90 7f       	andi	r25, 0xF0	; 240
 200:	29 2f       	mov	r18, r25
 202:	2d 60       	ori	r18, 0x0D	; 13
 204:	29 83       	std	Y+1, r18	; 0x01
	d_buf[1] = (data &0xF0) | RS1_EN0 | BackLight;
 206:	99 60       	ori	r25, 0x09	; 9
 208:	9a 83       	std	Y+2, r25	; 0x02
	
	d_buf[2] = ((data <<4)&0xF0) | RS1_EN1 | BackLight;
 20a:	20 e1       	ldi	r18, 0x10	; 16
 20c:	82 9f       	mul	r24, r18
 20e:	c0 01       	movw	r24, r0
 210:	11 24       	eor	r1, r1
 212:	98 2f       	mov	r25, r24
 214:	9d 60       	ori	r25, 0x0D	; 13
 216:	9b 83       	std	Y+3, r25	; 0x03
	d_buf[3] = ((data <<4)&0xF0) | RS1_EN0 | BackLight;
 218:	89 60       	ori	r24, 0x09	; 9
 21a:	8c 83       	std	Y+4, r24	; 0x04
	
	while(i2c_transmit(I2C_addr_PCF8574, d_buf, 4));
 21c:	44 e0       	ldi	r20, 0x04	; 4
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	be 01       	movw	r22, r28
 222:	6f 5f       	subi	r22, 0xFF	; 255
 224:	7f 4f       	sbci	r23, 0xFF	; 255
 226:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 22a:	6b d0       	rcall	.+214    	; 0x302 <i2c_transmit>
 22c:	81 11       	cpse	r24, r1
 22e:	f6 cf       	rjmp	.-20     	; 0x21c <i2c_lcd_data+0x2c>
}
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <i2c_lcd_goto_XY>:
void i2c_lcd_goto_XY(uint8_t row, uint8_t col)
{
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 | address;
	
	i2c_lcd_command(command);
 23e:	90 e4       	ldi	r25, 0x40	; 64
 240:	89 9f       	mul	r24, r25
 242:	60 0d       	add	r22, r0
 244:	11 24       	eor	r1, r1
 246:	86 2f       	mov	r24, r22
 248:	80 68       	ori	r24, 0x80	; 128
 24a:	58 cf       	rjmp	.-336    	; 0xfc <i2c_lcd_command>
 24c:	08 95       	ret

0000024e <i2c_lcd_string>:
}

void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	ea 01       	movw	r28, r20
	i2c_lcd_goto_XY(row, col);
 254:	f4 df       	rcall	.-24     	; 0x23e <i2c_lcd_goto_XY>
	while(*string) {
 256:	88 81       	ld	r24, Y
 258:	88 23       	and	r24, r24
 25a:	29 f0       	breq	.+10     	; 0x266 <i2c_lcd_string+0x18>
		i2c_lcd_data(*string++);
 25c:	21 96       	adiw	r28, 0x01	; 1
 25e:	c8 df       	rcall	.-112    	; 0x1f0 <i2c_lcd_data>
}

void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
	i2c_lcd_goto_XY(row, col);
	while(*string) {
 260:	89 91       	ld	r24, Y+
 262:	81 11       	cpse	r24, r1
 264:	fc cf       	rjmp	.-8      	; 0x25e <i2c_lcd_string+0x10>
		i2c_lcd_data(*string++);
	}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <weight_init>:
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	8a bb       	out	0x1a, r24	; 26
 270:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 274:	88 e0       	ldi	r24, 0x08	; 8
 276:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
 27a:	86 e0       	ldi	r24, 0x06	; 6
 27c:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
 280:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
 284:	87 e6       	ldi	r24, 0x67	; 103
 286:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 28a:	08 95       	ret

0000028c <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
 28c:	88 e4       	ldi	r24, 0x48	; 72
 28e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 292:	08 95       	ret

00000294 <i2c_start>:
 294:	e4 e7       	ldi	r30, 0x74	; 116
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	10 82       	st	Z, r1
 29a:	94 ea       	ldi	r25, 0xA4	; 164
 29c:	90 83       	st	Z, r25
 29e:	90 81       	ld	r25, Z
 2a0:	99 23       	and	r25, r25
 2a2:	ec f7       	brge	.-6      	; 0x29e <i2c_start+0xa>
 2a4:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 2a8:	98 7f       	andi	r25, 0xF8	; 248
 2aa:	98 30       	cpi	r25, 0x08	; 8
 2ac:	a1 f4       	brne	.+40     	; 0x2d6 <i2c_start+0x42>
 2ae:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 2b2:	84 e8       	ldi	r24, 0x84	; 132
 2b4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 2b8:	e4 e7       	ldi	r30, 0x74	; 116
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	88 23       	and	r24, r24
 2c0:	ec f7       	brge	.-6      	; 0x2bc <i2c_start+0x28>
 2c2:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 2c6:	98 7f       	andi	r25, 0xF8	; 248
 2c8:	98 31       	cpi	r25, 0x18	; 24
 2ca:	39 f0       	breq	.+14     	; 0x2da <i2c_start+0x46>
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 34       	cpi	r25, 0x40	; 64
 2d0:	29 f4       	brne	.+10     	; 0x2dc <i2c_start+0x48>
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	08 95       	ret
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	08 95       	ret
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	08 95       	ret

000002de <i2c_write>:
 2de:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 2e2:	84 e8       	ldi	r24, 0x84	; 132
 2e4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 2e8:	e4 e7       	ldi	r30, 0x74	; 116
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	88 23       	and	r24, r24
 2f0:	ec f7       	brge	.-6      	; 0x2ec <i2c_write+0xe>
 2f2:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 2f6:	98 7f       	andi	r25, 0xF8	; 248
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	98 32       	cpi	r25, 0x28	; 40
 2fc:	09 f4       	brne	.+2      	; 0x300 <i2c_write+0x22>
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	08 95       	ret

00000302 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
 302:	cf 92       	push	r12
 304:	df 92       	push	r13
 306:	ff 92       	push	r15
 308:	0f 93       	push	r16
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	6b 01       	movw	r12, r22
 312:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
 314:	bf df       	rcall	.-130    	; 0x294 <i2c_start>
 316:	f8 2e       	mov	r15, r24
 318:	81 11       	cpse	r24, r1
 31a:	17 c0       	rjmp	.+46     	; 0x34a <i2c_transmit+0x48>
	
	for (uint16_t i = 0; i < length; i++)
 31c:	01 15       	cp	r16, r1
 31e:	11 05       	cpc	r17, r1
 320:	81 f0       	breq	.+32     	; 0x342 <i2c_transmit+0x40>
 322:	e6 01       	movw	r28, r12
 324:	0c 0d       	add	r16, r12
 326:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 328:	89 91       	ld	r24, Y+
 32a:	d9 df       	rcall	.-78     	; 0x2de <i2c_write>
 32c:	81 11       	cpse	r24, r1
 32e:	10 c0       	rjmp	.+32     	; 0x350 <i2c_transmit+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 330:	8f e9       	ldi	r24, 0x9F	; 159
 332:	9f e0       	ldi	r25, 0x0F	; 15
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <i2c_transmit+0x32>
 338:	00 c0       	rjmp	.+0      	; 0x33a <i2c_transmit+0x38>
 33a:	00 00       	nop

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
 33c:	0c 17       	cp	r16, r28
 33e:	1d 07       	cpc	r17, r29
 340:	99 f7       	brne	.-26     	; 0x328 <i2c_transmit+0x26>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 342:	84 e9       	ldi	r24, 0x94	; 148
 344:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 348:	05 c0       	rjmp	.+10     	; 0x354 <i2c_transmit+0x52>
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
 34a:	ff 24       	eor	r15, r15
 34c:	f3 94       	inc	r15
 34e:	02 c0       	rjmp	.+4      	; 0x354 <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 350:	ff 24       	eor	r15, r15
 352:	f3 94       	inc	r15
	}
	
	i2c_stop();
	
	return 0;
}
 354:	8f 2d       	mov	r24, r15
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	ff 90       	pop	r15
 360:	df 90       	pop	r13
 362:	cf 90       	pop	r12
 364:	08 95       	ret

00000366 <motorA>:
}

void uart_send(char data)
{
	while(!(UCSR0A & (1<<UDRE0)));
	UDR0 = data;
 366:	8c e1       	ldi	r24, 0x1C	; 28
 368:	9c e0       	ldi	r25, 0x0C	; 12
 36a:	9b bd       	out	0x2b, r25	; 43
 36c:	8a bd       	out	0x2a, r24	; 42
 36e:	2f ef       	ldi	r18, 0xFF	; 255
 370:	83 ed       	ldi	r24, 0xD3	; 211
 372:	90 e3       	ldi	r25, 0x30	; 48
 374:	21 50       	subi	r18, 0x01	; 1
 376:	80 40       	sbci	r24, 0x00	; 0
 378:	90 40       	sbci	r25, 0x00	; 0
 37a:	e1 f7       	brne	.-8      	; 0x374 <motorA+0xe>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <motorA+0x18>
 37e:	00 00       	nop
 380:	88 ee       	ldi	r24, 0xE8	; 232
 382:	93 e0       	ldi	r25, 0x03	; 3
 384:	9b bd       	out	0x2b, r25	; 43
 386:	8a bd       	out	0x2a, r24	; 42
 388:	2f ef       	ldi	r18, 0xFF	; 255
 38a:	83 ed       	ldi	r24, 0xD3	; 211
 38c:	90 e3       	ldi	r25, 0x30	; 48
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	80 40       	sbci	r24, 0x00	; 0
 392:	90 40       	sbci	r25, 0x00	; 0
 394:	e1 f7       	brne	.-8      	; 0x38e <motorA+0x28>
 396:	00 c0       	rjmp	.+0      	; 0x398 <motorA+0x32>
 398:	00 00       	nop
 39a:	08 95       	ret

0000039c <motorB>:
 39c:	8c e1       	ldi	r24, 0x1C	; 28
 39e:	9c e0       	ldi	r25, 0x0C	; 12
 3a0:	99 bd       	out	0x29, r25	; 41
 3a2:	88 bd       	out	0x28, r24	; 40
 3a4:	2f ef       	ldi	r18, 0xFF	; 255
 3a6:	83 ed       	ldi	r24, 0xD3	; 211
 3a8:	90 e3       	ldi	r25, 0x30	; 48
 3aa:	21 50       	subi	r18, 0x01	; 1
 3ac:	80 40       	sbci	r24, 0x00	; 0
 3ae:	90 40       	sbci	r25, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <motorB+0xe>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <motorB+0x18>
 3b4:	00 00       	nop
 3b6:	88 ee       	ldi	r24, 0xE8	; 232
 3b8:	93 e0       	ldi	r25, 0x03	; 3
 3ba:	99 bd       	out	0x29, r25	; 41
 3bc:	88 bd       	out	0x28, r24	; 40
 3be:	2f ef       	ldi	r18, 0xFF	; 255
 3c0:	83 ed       	ldi	r24, 0xD3	; 211
 3c2:	90 e3       	ldi	r25, 0x30	; 48
 3c4:	21 50       	subi	r18, 0x01	; 1
 3c6:	80 40       	sbci	r24, 0x00	; 0
 3c8:	90 40       	sbci	r25, 0x00	; 0
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <motorB+0x28>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <motorB+0x32>
 3ce:	00 00       	nop
 3d0:	08 95       	ret

000003d2 <motorC>:
 3d2:	8c e1       	ldi	r24, 0x1C	; 28
 3d4:	9c e0       	ldi	r25, 0x0C	; 12
 3d6:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 3da:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 3de:	2f ef       	ldi	r18, 0xFF	; 255
 3e0:	83 ed       	ldi	r24, 0xD3	; 211
 3e2:	90 e3       	ldi	r25, 0x30	; 48
 3e4:	21 50       	subi	r18, 0x01	; 1
 3e6:	80 40       	sbci	r24, 0x00	; 0
 3e8:	90 40       	sbci	r25, 0x00	; 0
 3ea:	e1 f7       	brne	.-8      	; 0x3e4 <motorC+0x12>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <motorC+0x1c>
 3ee:	00 00       	nop
 3f0:	08 95       	ret

000003f2 <__vector_7>:
 3f2:	1f 92       	push	r1
 3f4:	0f 92       	push	r0
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	0f 92       	push	r0
 3fa:	11 24       	eor	r1, r1
 3fc:	8f 93       	push	r24
 3fe:	9f 93       	push	r25
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	90 93 38 01 	sts	0x0138, r25	; 0x800138 <check0+0x1>
 408:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <check0>
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	0f 90       	pop	r0
 412:	0f be       	out	0x3f, r0	; 63
 414:	0f 90       	pop	r0
 416:	1f 90       	pop	r1
 418:	18 95       	reti

0000041a <__vector_8>:
 41a:	1f 92       	push	r1
 41c:	0f 92       	push	r0
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	0f 92       	push	r0
 422:	11 24       	eor	r1, r1
 424:	8f 93       	push	r24
 426:	9f 93       	push	r25
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	90 93 36 01 	sts	0x0136, r25	; 0x800136 <check1+0x1>
 430:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <check1>
 434:	9f 91       	pop	r25
 436:	8f 91       	pop	r24
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <uart_init>:
 442:	1b b8       	out	0x0b, r1	; 11
 444:	88 e1       	ldi	r24, 0x18	; 24
 446:	8a b9       	out	0x0a, r24	; 10
 448:	86 e0       	ldi	r24, 0x06	; 6
 44a:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
 44e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 452:	87 e6       	ldi	r24, 0x67	; 103
 454:	89 b9       	out	0x09, r24	; 9
 456:	78 94       	sei
 458:	08 95       	ret

0000045a <uart_receive>:
}

char uart_receive(void)
{
	while(!(UCSR0A & 0x80));
 45a:	5f 9b       	sbis	0x0b, 7	; 11
 45c:	fe cf       	rjmp	.-4      	; 0x45a <uart_receive>
	//수신완료 flag 비트가 1되면 정지
	return UDR0;
 45e:	8c b1       	in	r24, 0x0c	; 12
	//UART0번 사용
}
 460:	08 95       	ret

00000462 <main>:

int main(void)
{
 462:	cf 93       	push	r28
 464:	df 93       	push	r29
 466:	cd b7       	in	r28, 0x3d	; 61
 468:	de b7       	in	r29, 0x3e	; 62
 46a:	a0 97       	sbiw	r28, 0x20	; 32
 46c:	0f b6       	in	r0, 0x3f	; 63
 46e:	f8 94       	cli
 470:	de bf       	out	0x3e, r29	; 62
 472:	0f be       	out	0x3f, r0	; 63
 474:	cd bf       	out	0x3d, r28	; 61
	DDRB=0b11100000;   // PB567 out
 476:	80 ee       	ldi	r24, 0xE0	; 224
 478:	87 bb       	out	0x17, r24	; 23
	TCCR1A=0b10101010; TCCR1B=0x1A;  ICR1=19999; 
 47a:	8a ea       	ldi	r24, 0xAA	; 170
 47c:	8f bd       	out	0x2f, r24	; 47
 47e:	8a e1       	ldi	r24, 0x1A	; 26
 480:	8e bd       	out	0x2e, r24	; 46
 482:	8f e1       	ldi	r24, 0x1F	; 31
 484:	9e e4       	ldi	r25, 0x4E	; 78
 486:	97 bd       	out	0x27, r25	; 39
 488:	86 bd       	out	0x26, r24	; 38
	// OCR1A -> OC Clear / Fast PWM TOP = ICR1 / 8분주
	// OCR1A=3000; OCR1B=3000;
	// TCCR1B=0x1A; OCR1A=3000; ICR1=19999;
	
	uart_init();
 48a:	db df       	rcall	.-74     	; 0x442 <uart_init>

	// 외부 인터럽트 초기화
	EICRA=0b00000000; //외부인터럽트 01번핀 트리거 신호를  falling edge 설정
 48c:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB=0b10100000; 
 490:	80 ea       	ldi	r24, 0xA0	; 160
 492:	8a bf       	out	0x3a, r24	; 58
	EIMSK=0b11000000; //INT6, 7을 외부 인터럽트로 사용하기 위해서	
 494:	80 ec       	ldi	r24, 0xC0	; 192
 496:	89 bf       	out	0x39, r24	; 57
	
	sei();
	
	weight_init();	// 무게 측정 코드 레지스터 설정 함수
 498:	78 94       	sei
	
	i2c_lcd_init();	// clcd i2c 통신 초기화
 49a:	e8 de       	rcall	.-560    	; 0x26c <weight_init>
 49c:	56 de       	rcall	.-852    	; 0x14a <i2c_lcd_init>
	
	char str0[16] = "1234";
 49e:	85 e0       	ldi	r24, 0x05	; 5
 4a0:	e1 e0       	ldi	r30, 0x01	; 1
 4a2:	f1 e0       	ldi	r31, 0x01	; 1
 4a4:	de 01       	movw	r26, r28
 4a6:	11 96       	adiw	r26, 0x01	; 1
 4a8:	01 90       	ld	r0, Z+
 4aa:	0d 92       	st	X+, r0
 4ac:	8a 95       	dec	r24
 4ae:	e1 f7       	brne	.-8      	; 0x4a8 <main+0x46>
 4b0:	fe 01       	movw	r30, r28
 4b2:	36 96       	adiw	r30, 0x06	; 6
 4b4:	8b e0       	ldi	r24, 0x0B	; 11
 4b6:	df 01       	movw	r26, r30
 4b8:	1d 92       	st	X+, r1
 4ba:	8a 95       	dec	r24
 4bc:	e9 f7       	brne	.-6      	; 0x4b8 <main+0x56>
	char str1[16] = "ATmega128";
 4be:	8a e0       	ldi	r24, 0x0A	; 10
 4c0:	e1 e1       	ldi	r30, 0x11	; 17
 4c2:	f1 e0       	ldi	r31, 0x01	; 1
 4c4:	de 01       	movw	r26, r28
 4c6:	51 96       	adiw	r26, 0x11	; 17
 4c8:	01 90       	ld	r0, Z+
 4ca:	0d 92       	st	X+, r0
 4cc:	8a 95       	dec	r24
 4ce:	e1 f7       	brne	.-8      	; 0x4c8 <main+0x66>
 4d0:	fe 01       	movw	r30, r28
 4d2:	7b 96       	adiw	r30, 0x1b	; 27
 4d4:	86 e0       	ldi	r24, 0x06	; 6
 4d6:	df 01       	movw	r26, r30
 4d8:	1d 92       	st	X+, r1
 4da:	8a 95       	dec	r24
 4dc:	e9 f7       	brne	.-6      	; 0x4d8 <main+0x76>
	
	i2c_lcd_string(0, 0, str0);
 4de:	ae 01       	movw	r20, r28
 4e0:	4f 5f       	subi	r20, 0xFF	; 255
 4e2:	5f 4f       	sbci	r21, 0xFF	; 255
 4e4:	60 e0       	ldi	r22, 0x00	; 0
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	b2 de       	rcall	.-668    	; 0x24e <i2c_lcd_string>
	i2c_lcd_string(1, 0, str1);
 4ea:	ae 01       	movw	r20, r28
 4ec:	4f 5e       	subi	r20, 0xEF	; 239
 4ee:	5f 4f       	sbci	r21, 0xFF	; 255
 4f0:	60 e0       	ldi	r22, 0x00	; 0
 4f2:	81 e0       	ldi	r24, 0x01	; 1
 4f4:	ac de       	rcall	.-680    	; 0x24e <i2c_lcd_string>
	
	i2c_lcd_string(1, 0, "test");	// 됨
 4f6:	41 e2       	ldi	r20, 0x21	; 33
 4f8:	51 e0       	ldi	r21, 0x01	; 1
 4fa:	60 e0       	ldi	r22, 0x00	; 0
 4fc:	81 e0       	ldi	r24, 0x01	; 1
 4fe:	a7 de       	rcall	.-690    	; 0x24e <i2c_lcd_string>
 500:	87 e0       	ldi	r24, 0x07	; 7
	
//	str0[16] = "111111";		// 안됨
	strcpy(str0, "111111");		// 해결법 string.h 해서.. (문자열을 대입하는 strcpy 함수 사용)
 502:	e6 e2       	ldi	r30, 0x26	; 38
 504:	f1 e0       	ldi	r31, 0x01	; 1
 506:	de 01       	movw	r26, r28
 508:	11 96       	adiw	r26, 0x01	; 1
 50a:	01 90       	ld	r0, Z+
 50c:	0d 92       	st	X+, r0
 50e:	8a 95       	dec	r24
 510:	e1 f7       	brne	.-8      	; 0x50a <main+0xa8>
	i2c_lcd_string(0, 0, str0);	//
 512:	ae 01       	movw	r20, r28
 514:	4f 5f       	subi	r20, 0xFF	; 255
 516:	5f 4f       	sbci	r21, 0xFF	; 255
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	80 e0       	ldi	r24, 0x00	; 0
 51c:	98 de       	rcall	.-720    	; 0x24e <i2c_lcd_string>
 51e:	01 e0       	ldi	r16, 0x01	; 1
			receive = uart_receive();	// 폴링방식이여서 어플에서 안보내면 여기서 멈춤
			// 폴링 방식이 안된다면 인터럽트로 수신받아야 함
			
			if(receive == 'a'){
				// A약 시간이 맞으면 a 를 받음 (알람일때?)
				check_time = 1;
 520:	10 e0       	ldi	r17, 0x00	; 0
 522:	68 94       	set
			} 
			
			if(receive == 'b'){
				// B약 시간이 맞으면 b 를 받음 (알람일때?)
				check_time = 1;
				motor_sel = 2;	// b모터 선택
 524:	ee 24       	eor	r14, r14
 526:	e1 f8       	bld	r14, 1
 528:	f1 2c       	mov	r15, r1
	{
		// 약을 체크하는 코드 넣어야 함 (check_yak 변하게)
		// 무게는 weight = ReadCout()/4
		// ....
		
		if(check_yak == 1)
 52a:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <check_yak>
 52e:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <check_yak+0x1>
 532:	01 97       	sbiw	r24, 0x01	; 1
 534:	d1 f7       	brne	.-12     	; 0x52a <main+0xc8>
		{
			// 어플에서 시간이 맞으면 블루투스로 받아서 check_time 변하게 해야함 
			// ....
			
			receive = uart_receive();	// 폴링방식이여서 어플에서 안보내면 여기서 멈춤
 536:	91 df       	rcall	.-222    	; 0x45a <uart_receive>
 538:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <receive>
 53c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <receive>
			// 폴링 방식이 안된다면 인터럽트로 수신받아야 함
			
			if(receive == 'a'){
 540:	81 36       	cpi	r24, 0x61	; 97
 542:	41 f4       	brne	.+16     	; 0x554 <main+0xf2>
 544:	10 93 31 01 	sts	0x0131, r17	; 0x800131 <check_time+0x1>
				// A약 시간이 맞으면 a 를 받음 (알람일때?)
				check_time = 1;
 548:	00 93 30 01 	sts	0x0130, r16	; 0x800130 <check_time>
 54c:	10 93 2f 01 	sts	0x012F, r17	; 0x80012f <__data_end+0x1>
				motor_sel = 1;	// a모터 선택
 550:	00 93 2e 01 	sts	0x012E, r16	; 0x80012e <__data_end>
 554:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <receive>
			} 
			
			if(receive == 'b'){
 558:	82 36       	cpi	r24, 0x62	; 98
 55a:	41 f4       	brne	.+16     	; 0x56c <main+0x10a>
 55c:	10 93 31 01 	sts	0x0131, r17	; 0x800131 <check_time+0x1>
				// B약 시간이 맞으면 b 를 받음 (알람일때?)
				check_time = 1;
 560:	00 93 30 01 	sts	0x0130, r16	; 0x800130 <check_time>
 564:	f0 92 2f 01 	sts	0x012F, r15	; 0x80012f <__data_end+0x1>
				motor_sel = 2;	// b모터 선택
 568:	e0 92 2e 01 	sts	0x012E, r14	; 0x80012e <__data_end>
 56c:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <check_time>
			}
			
			if(check_time == 1)
 570:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <check_time+0x1>
 574:	01 97       	sbiw	r24, 0x01	; 1
 576:	c9 f6       	brne	.-78     	; 0x52a <main+0xc8>
 578:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
			{
				/*주요 로직*/
				switch(motor_sel)	// motor_sel=1 : A, 2:B
 57c:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
 580:	81 30       	cpi	r24, 0x01	; 1
 582:	91 05       	cpc	r25, r1
 584:	49 f0       	breq	.+18     	; 0x598 <main+0x136>
 586:	02 97       	sbiw	r24, 0x02	; 2
 588:	f1 f4       	brne	.+60     	; 0x5c6 <main+0x164>
 58a:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <check1>
						}	// 약이 떨어질 때 까지 motorA 돌리기
						motorC();	// 잠금장치 풀기
						break;
					
					case 2 :
						while (check1 == 0)		// check0,1 변수는 포토인터럽트 모듈의 인터럽트에 의해서 변경됨
 58e:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <check1+0x1>
 592:	89 2b       	or	r24, r25
 594:	81 f0       	breq	.+32     	; 0x5b6 <main+0x154>
 596:	16 c0       	rjmp	.+44     	; 0x5c4 <main+0x162>
			{
				/*주요 로직*/
				switch(motor_sel)	// motor_sel=1 : A, 2:B
				{
					case 1 :
						while (check0 == 0)		// check0,1 변수는 포토인터럽트 모듈의 인터럽트에 의해서 변경됨
 598:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <check0>
 59c:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <check0+0x1>
 5a0:	89 2b       	or	r24, r25
						{
							motorA();
 5a2:	39 f4       	brne	.+14     	; 0x5b2 <main+0x150>
			{
				/*주요 로직*/
				switch(motor_sel)	// motor_sel=1 : A, 2:B
				{
					case 1 :
						while (check0 == 0)		// check0,1 변수는 포토인터럽트 모듈의 인터럽트에 의해서 변경됨
 5a4:	e0 de       	rcall	.-576    	; 0x366 <motorA>
 5a6:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <check0>
 5aa:	90 91 38 01 	lds	r25, 0x0138	; 0x800138 <check0+0x1>
 5ae:	89 2b       	or	r24, r25
						{
							motorA();
						}	// 약이 떨어질 때 까지 motorA 돌리기
						motorC();	// 잠금장치 풀기
 5b0:	c9 f3       	breq	.-14     	; 0x5a4 <main+0x142>
						break;
 5b2:	0f df       	rcall	.-482    	; 0x3d2 <motorC>
					
					case 2 :
						while (check1 == 0)		// check0,1 변수는 포토인터럽트 모듈의 인터럽트에 의해서 변경됨
						{
							motorB();
 5b4:	08 c0       	rjmp	.+16     	; 0x5c6 <main+0x164>
 5b6:	f2 de       	rcall	.-540    	; 0x39c <motorB>
						}	// 약이 떨어질 때 까지 motorA 돌리기
						motorC();	// 잠금장치 풀기
						break;
					
					case 2 :
						while (check1 == 0)		// check0,1 변수는 포토인터럽트 모듈의 인터럽트에 의해서 변경됨
 5b8:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <check1>
 5bc:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <check1+0x1>
 5c0:	89 2b       	or	r24, r25
 5c2:	c9 f3       	breq	.-14     	; 0x5b6 <main+0x154>
						{
							motorB();
						}	// 약이 떨어질 때 까지 motorB 돌리기
						motorC();	// 잠금장치 풀기
 5c4:	06 df       	rcall	.-500    	; 0x3d2 <motorC>
 5c6:	10 92 38 01 	sts	0x0138, r1	; 0x800138 <check0+0x1>
						break;
					
					default:
						break;
				}
				check0=0; check1=0;	// 다시 약 체크상황 없는걸로 초기화
 5ca:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <check0>
 5ce:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <check1+0x1>
 5d2:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <check1>
 5d6:	a9 cf       	rjmp	.-174    	; 0x52a <main+0xc8>

000005d8 <_exit>:
 5d8:	f8 94       	cli

000005da <__stop_program>:
 5da:	ff cf       	rjmp	.-2      	; 0x5da <__stop_program>
