
yak1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000024  00800100  00000cc0  00000d54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800124  00800124  00000d78  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000dd4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000160  00000000  00000000  00000e10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000197f  00000000  00000000  00000f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dc9  00000000  00000000  000028ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c43  00000000  00000000  000036b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  000042fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000682  00000000  00000000  000046cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001315  00000000  00000000  00004d4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000150  00000000  00000000  00006063  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	ea c1       	rjmp	.+980    	; 0x3f2 <__vector_7>
  1e:	00 00       	nop
  20:	fc c1       	rjmp	.+1016   	; 0x41a <__vector_8>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	fc c1       	rjmp	.+1016   	; 0x442 <__vector_18>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e0 ec       	ldi	r30, 0xC0	; 192
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 32       	cpi	r26, 0x24	; 36
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e2       	ldi	r26, 0x24	; 36
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a4 33       	cpi	r26, 0x34	; 52
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	37 d2       	rcall	.+1134   	; 0x532 <main>
  c4:	fb c5       	rjmp	.+3062   	; 0xcbc <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <i2c_lcd_command_8>:
	
	// printf("Connect Ok\r\n");
}

void i2c_lcd_command_8(uint8_t command)
{
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	00 d0       	rcall	.+0      	; 0xce <i2c_lcd_command_8+0x6>
  ce:	cd b7       	in	r28, 0x3d	; 61
  d0:	de b7       	in	r29, 0x3e	; 62
	uint8_t c_buf[2];
	
	c_buf[0] = (command&0xF0) | RS0_EN1 | BackLight;
  d2:	80 7f       	andi	r24, 0xF0	; 240
  d4:	98 2f       	mov	r25, r24
  d6:	9c 60       	ori	r25, 0x0C	; 12
  d8:	99 83       	std	Y+1, r25	; 0x01
	c_buf[1] = (command&0xF0) | RS0_EN0 | BackLight;
  da:	88 60       	ori	r24, 0x08	; 8
  dc:	8a 83       	std	Y+2, r24	; 0x02
	
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 2));
  de:	42 e0       	ldi	r20, 0x02	; 2
  e0:	50 e0       	ldi	r21, 0x00	; 0
  e2:	be 01       	movw	r22, r28
  e4:	6f 5f       	subi	r22, 0xFF	; 255
  e6:	7f 4f       	sbci	r23, 0xFF	; 255
  e8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <I2C_addr_PCF8574>
  ec:	0a d1       	rcall	.+532    	; 0x302 <i2c_transmit>
  ee:	81 11       	cpse	r24, r1
  f0:	f6 cf       	rjmp	.-20     	; 0xde <i2c_lcd_command_8+0x16>
}
  f2:	0f 90       	pop	r0
  f4:	0f 90       	pop	r0
  f6:	df 91       	pop	r29
  f8:	cf 91       	pop	r28
  fa:	08 95       	ret

000000fc <i2c_lcd_command>:

void i2c_lcd_command(uint8_t command)
{
  fc:	cf 93       	push	r28
  fe:	df 93       	push	r29
 100:	00 d0       	rcall	.+0      	; 0x102 <i2c_lcd_command+0x6>
 102:	00 d0       	rcall	.+0      	; 0x104 <i2c_lcd_command+0x8>
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
	uint8_t c_buf[4];
	
	c_buf[0] = (command &0xF0) | RS0_EN1 | BackLight;
 108:	98 2f       	mov	r25, r24
 10a:	90 7f       	andi	r25, 0xF0	; 240
 10c:	29 2f       	mov	r18, r25
 10e:	2c 60       	ori	r18, 0x0C	; 12
 110:	29 83       	std	Y+1, r18	; 0x01
	c_buf[1] = (command &0xF0) | RS0_EN0 | BackLight;
 112:	98 60       	ori	r25, 0x08	; 8
 114:	9a 83       	std	Y+2, r25	; 0x02
	
	c_buf[2] = ((command <<4)&0xF0) | RS0_EN1 | BackLight;
 116:	20 e1       	ldi	r18, 0x10	; 16
 118:	82 9f       	mul	r24, r18
 11a:	c0 01       	movw	r24, r0
 11c:	11 24       	eor	r1, r1
 11e:	98 2f       	mov	r25, r24
 120:	9c 60       	ori	r25, 0x0C	; 12
 122:	9b 83       	std	Y+3, r25	; 0x03
	c_buf[3] = ((command <<4)&0xF0) | RS0_EN0 | BackLight;
 124:	88 60       	ori	r24, 0x08	; 8
 126:	8c 83       	std	Y+4, r24	; 0x04
	
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
 128:	44 e0       	ldi	r20, 0x04	; 4
 12a:	50 e0       	ldi	r21, 0x00	; 0
 12c:	be 01       	movw	r22, r28
 12e:	6f 5f       	subi	r22, 0xFF	; 255
 130:	7f 4f       	sbci	r23, 0xFF	; 255
 132:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <I2C_addr_PCF8574>
 136:	e5 d0       	rcall	.+458    	; 0x302 <i2c_transmit>
 138:	81 11       	cpse	r24, r1
 13a:	f6 cf       	rjmp	.-20     	; 0x128 <i2c_lcd_command+0x2c>
}
 13c:	0f 90       	pop	r0
 13e:	0f 90       	pop	r0
 140:	0f 90       	pop	r0
 142:	0f 90       	pop	r0
 144:	df 91       	pop	r29
 146:	cf 91       	pop	r28
 148:	08 95       	ret

0000014a <i2c_lcd_init>:

uint8_t I2C_addr_PCF8574 = (0x27 << 1);

void i2c_lcd_init(void)
{
	i2c_init();
 14a:	a0 d0       	rcall	.+320    	; 0x28c <i2c_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 14c:	2f ef       	ldi	r18, 0xFF	; 255
 14e:	89 e6       	ldi	r24, 0x69	; 105
 150:	98 e1       	ldi	r25, 0x18	; 24
 152:	21 50       	subi	r18, 0x01	; 1
 154:	80 40       	sbci	r24, 0x00	; 0
 156:	90 40       	sbci	r25, 0x00	; 0
 158:	e1 f7       	brne	.-8      	; 0x152 <i2c_lcd_init+0x8>
 15a:	00 c0       	rjmp	.+0      	; 0x15c <i2c_lcd_init+0x12>
 15c:	00 00       	nop
	_delay_ms(500);

	// printf("Before Initialize... \r\n");
	i2c_lcd_command_8(0x30); _delay_ms(5);
 15e:	80 e3       	ldi	r24, 0x30	; 48
 160:	b3 df       	rcall	.-154    	; 0xc8 <i2c_lcd_command_8>
 162:	8f e1       	ldi	r24, 0x1F	; 31
 164:	9e e4       	ldi	r25, 0x4E	; 78
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <i2c_lcd_init+0x1c>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <i2c_lcd_init+0x22>
	i2c_lcd_command_8(0x30); _delay_us(100);
 16c:	00 00       	nop
 16e:	80 e3       	ldi	r24, 0x30	; 48
 170:	ab df       	rcall	.-170    	; 0xc8 <i2c_lcd_command_8>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 172:	8f e8       	ldi	r24, 0x8F	; 143
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	01 97       	sbiw	r24, 0x01	; 1
 178:	f1 f7       	brne	.-4      	; 0x176 <i2c_lcd_init+0x2c>
 17a:	00 c0       	rjmp	.+0      	; 0x17c <i2c_lcd_init+0x32>
	i2c_lcd_command_8(0x30); _delay_us(100);
 17c:	00 00       	nop
 17e:	80 e3       	ldi	r24, 0x30	; 48
 180:	a3 df       	rcall	.-186    	; 0xc8 <i2c_lcd_command_8>
 182:	8f e8       	ldi	r24, 0x8F	; 143
 184:	91 e0       	ldi	r25, 0x01	; 1
 186:	01 97       	sbiw	r24, 0x01	; 1
 188:	f1 f7       	brne	.-4      	; 0x186 <i2c_lcd_init+0x3c>
 18a:	00 c0       	rjmp	.+0      	; 0x18c <i2c_lcd_init+0x42>
	i2c_lcd_command_8(0x20); _delay_us(100);
 18c:	00 00       	nop
 18e:	80 e2       	ldi	r24, 0x20	; 32
 190:	9b df       	rcall	.-202    	; 0xc8 <i2c_lcd_command_8>
 192:	8f e8       	ldi	r24, 0x8F	; 143
 194:	91 e0       	ldi	r25, 0x01	; 1
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <i2c_lcd_init+0x4c>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <i2c_lcd_init+0x52>
	
	i2c_lcd_command(0x28); _delay_us(50);
 19c:	00 00       	nop
 19e:	88 e2       	ldi	r24, 0x28	; 40
 1a0:	ad df       	rcall	.-166    	; 0xfc <i2c_lcd_command>
 1a2:	87 ec       	ldi	r24, 0xC7	; 199
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <i2c_lcd_init+0x5c>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <i2c_lcd_init+0x62>
	i2c_lcd_command(0x08); _delay_us(50);
 1ac:	00 00       	nop
 1ae:	88 e0       	ldi	r24, 0x08	; 8
 1b0:	a5 df       	rcall	.-182    	; 0xfc <i2c_lcd_command>
 1b2:	87 ec       	ldi	r24, 0xC7	; 199
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	01 97       	sbiw	r24, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <i2c_lcd_init+0x6c>
 1ba:	00 c0       	rjmp	.+0      	; 0x1bc <i2c_lcd_init+0x72>
	i2c_lcd_command(0x01); _delay_ms(3);
 1bc:	00 00       	nop
 1be:	81 e0       	ldi	r24, 0x01	; 1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	9d df       	rcall	.-198    	; 0xfc <i2c_lcd_command>
 1c2:	8f ed       	ldi	r24, 0xDF	; 223
 1c4:	9e e2       	ldi	r25, 0x2E	; 46
 1c6:	01 97       	sbiw	r24, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <i2c_lcd_init+0x7c>
 1ca:	00 c0       	rjmp	.+0      	; 0x1cc <i2c_lcd_init+0x82>
	i2c_lcd_command(0x06); _delay_us(50);
 1cc:	00 00       	nop
 1ce:	86 e0       	ldi	r24, 0x06	; 6
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d0:	95 df       	rcall	.-214    	; 0xfc <i2c_lcd_command>
 1d2:	87 ec       	ldi	r24, 0xC7	; 199
 1d4:	90 e0       	ldi	r25, 0x00	; 0
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <i2c_lcd_init+0x8c>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <i2c_lcd_init+0x92>
	i2c_lcd_command(0x0C); _delay_us(50);
 1dc:	00 00       	nop
 1de:	8c e0       	ldi	r24, 0x0C	; 12
 1e0:	8d df       	rcall	.-230    	; 0xfc <i2c_lcd_command>
 1e2:	87 ec       	ldi	r24, 0xC7	; 199
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	01 97       	sbiw	r24, 0x01	; 1
 1e8:	f1 f7       	brne	.-4      	; 0x1e6 <i2c_lcd_init+0x9c>
 1ea:	00 c0       	rjmp	.+0      	; 0x1ec <i2c_lcd_init+0xa2>
 1ec:	00 00       	nop
 1ee:	08 95       	ret

000001f0 <i2c_lcd_data>:
	
	while(i2c_transmit(I2C_addr_PCF8574, c_buf, 4));
}

void i2c_lcd_data(uint8_t data)
{
 1f0:	cf 93       	push	r28
 1f2:	df 93       	push	r29
 1f4:	00 d0       	rcall	.+0      	; 0x1f6 <i2c_lcd_data+0x6>
 1f6:	00 d0       	rcall	.+0      	; 0x1f8 <i2c_lcd_data+0x8>
 1f8:	cd b7       	in	r28, 0x3d	; 61
 1fa:	de b7       	in	r29, 0x3e	; 62
	uint8_t d_buf[4];
	
	d_buf[0] = (data &0xF0) | RS1_EN1 | BackLight;
 1fc:	98 2f       	mov	r25, r24
 1fe:	90 7f       	andi	r25, 0xF0	; 240
 200:	29 2f       	mov	r18, r25
 202:	2d 60       	ori	r18, 0x0D	; 13
 204:	29 83       	std	Y+1, r18	; 0x01
	d_buf[1] = (data &0xF0) | RS1_EN0 | BackLight;
 206:	99 60       	ori	r25, 0x09	; 9
 208:	9a 83       	std	Y+2, r25	; 0x02
	
	d_buf[2] = ((data <<4)&0xF0) | RS1_EN1 | BackLight;
 20a:	20 e1       	ldi	r18, 0x10	; 16
 20c:	82 9f       	mul	r24, r18
 20e:	c0 01       	movw	r24, r0
 210:	11 24       	eor	r1, r1
 212:	98 2f       	mov	r25, r24
 214:	9d 60       	ori	r25, 0x0D	; 13
 216:	9b 83       	std	Y+3, r25	; 0x03
	d_buf[3] = ((data <<4)&0xF0) | RS1_EN0 | BackLight;
 218:	89 60       	ori	r24, 0x09	; 9
 21a:	8c 83       	std	Y+4, r24	; 0x04
	
	while(i2c_transmit(I2C_addr_PCF8574, d_buf, 4));
 21c:	44 e0       	ldi	r20, 0x04	; 4
 21e:	50 e0       	ldi	r21, 0x00	; 0
 220:	be 01       	movw	r22, r28
 222:	6f 5f       	subi	r22, 0xFF	; 255
 224:	7f 4f       	sbci	r23, 0xFF	; 255
 226:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <I2C_addr_PCF8574>
 22a:	6b d0       	rcall	.+214    	; 0x302 <i2c_transmit>
 22c:	81 11       	cpse	r24, r1
 22e:	f6 cf       	rjmp	.-20     	; 0x21c <i2c_lcd_data+0x2c>
}
 230:	0f 90       	pop	r0
 232:	0f 90       	pop	r0
 234:	0f 90       	pop	r0
 236:	0f 90       	pop	r0
 238:	df 91       	pop	r29
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <i2c_lcd_goto_XY>:
void i2c_lcd_goto_XY(uint8_t row, uint8_t col)
{
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 | address;
	
	i2c_lcd_command(command);
 23e:	90 e4       	ldi	r25, 0x40	; 64
 240:	89 9f       	mul	r24, r25
 242:	60 0d       	add	r22, r0
 244:	11 24       	eor	r1, r1
 246:	86 2f       	mov	r24, r22
 248:	80 68       	ori	r24, 0x80	; 128
 24a:	58 cf       	rjmp	.-336    	; 0xfc <i2c_lcd_command>
 24c:	08 95       	ret

0000024e <i2c_lcd_string>:
}

void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
 24e:	cf 93       	push	r28
 250:	df 93       	push	r29
 252:	ea 01       	movw	r28, r20
	i2c_lcd_goto_XY(row, col);
 254:	f4 df       	rcall	.-24     	; 0x23e <i2c_lcd_goto_XY>
	while(*string) {
 256:	88 81       	ld	r24, Y
 258:	88 23       	and	r24, r24
 25a:	29 f0       	breq	.+10     	; 0x266 <i2c_lcd_string+0x18>
		i2c_lcd_data(*string++);
 25c:	21 96       	adiw	r28, 0x01	; 1
 25e:	c8 df       	rcall	.-112    	; 0x1f0 <i2c_lcd_data>
}

void i2c_lcd_string(uint8_t row, uint8_t col, char *string)
{
	i2c_lcd_goto_XY(row, col);
	while(*string) {
 260:	89 91       	ld	r24, Y+
 262:	81 11       	cpse	r24, r1
 264:	fc cf       	rjmp	.-8      	; 0x25e <i2c_lcd_string+0x10>
		i2c_lcd_data(*string++);
	}
 266:	df 91       	pop	r29
 268:	cf 91       	pop	r28
 26a:	08 95       	ret

0000026c <weight_init>:
	}
}

void weight_init()
{
	DDRA = 0b00000010; // A0(DOUT) : input A1(SCK):output
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	8a bb       	out	0x1a, r24	; 26
	
	UCSR1A = 0b00000000;
 270:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
	UCSR1B = 0b00001000;
 274:	88 e0       	ldi	r24, 0x08	; 8
 276:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7e009a>
	UCSR1C = 0b00000110;
 27a:	86 e0       	ldi	r24, 0x06	; 6
 27c:	80 93 9d 00 	sts	0x009D, r24	; 0x80009d <__TEXT_REGION_LENGTH__+0x7e009d>
	UBRR1H = 0;
 280:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = 103;
 284:	87 e6       	ldi	r24, 0x67	; 103
 286:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
 28a:	08 95       	ret

0000028c <i2c_init>:
	TWCR = (1<<TWINT) | (1<<TWEN);
	// wait for end of transmission
	while( !(TWCR & (1<<TWINT)) );
	// return received data from TWDR
	return TWDR;
}
 28c:	88 e4       	ldi	r24, 0x48	; 72
 28e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
 292:	08 95       	ret

00000294 <i2c_start>:
 294:	e4 e7       	ldi	r30, 0x74	; 116
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	10 82       	st	Z, r1
 29a:	94 ea       	ldi	r25, 0xA4	; 164
 29c:	90 83       	st	Z, r25
 29e:	90 81       	ld	r25, Z
 2a0:	99 23       	and	r25, r25
 2a2:	ec f7       	brge	.-6      	; 0x29e <i2c_start+0xa>
 2a4:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 2a8:	98 7f       	andi	r25, 0xF8	; 248
 2aa:	98 30       	cpi	r25, 0x08	; 8
 2ac:	a1 f4       	brne	.+40     	; 0x2d6 <i2c_start+0x42>
 2ae:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 2b2:	84 e8       	ldi	r24, 0x84	; 132
 2b4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 2b8:	e4 e7       	ldi	r30, 0x74	; 116
 2ba:	f0 e0       	ldi	r31, 0x00	; 0
 2bc:	80 81       	ld	r24, Z
 2be:	88 23       	and	r24, r24
 2c0:	ec f7       	brge	.-6      	; 0x2bc <i2c_start+0x28>
 2c2:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 2c6:	98 7f       	andi	r25, 0xF8	; 248
 2c8:	98 31       	cpi	r25, 0x18	; 24
 2ca:	39 f0       	breq	.+14     	; 0x2da <i2c_start+0x46>
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 34       	cpi	r25, 0x40	; 64
 2d0:	29 f4       	brne	.+10     	; 0x2dc <i2c_start+0x48>
 2d2:	80 e0       	ldi	r24, 0x00	; 0
 2d4:	08 95       	ret
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	08 95       	ret
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	08 95       	ret

000002de <i2c_write>:
 2de:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
 2e2:	84 e8       	ldi	r24, 0x84	; 132
 2e4:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 2e8:	e4 e7       	ldi	r30, 0x74	; 116
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	88 23       	and	r24, r24
 2f0:	ec f7       	brge	.-6      	; 0x2ec <i2c_write+0xe>
 2f2:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
 2f6:	98 7f       	andi	r25, 0xF8	; 248
 2f8:	81 e0       	ldi	r24, 0x01	; 1
 2fa:	98 32       	cpi	r25, 0x28	; 40
 2fc:	09 f4       	brne	.+2      	; 0x300 <i2c_write+0x22>
 2fe:	80 e0       	ldi	r24, 0x00	; 0
 300:	08 95       	ret

00000302 <i2c_transmit>:

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
 302:	cf 92       	push	r12
 304:	df 92       	push	r13
 306:	ff 92       	push	r15
 308:	0f 93       	push	r16
 30a:	1f 93       	push	r17
 30c:	cf 93       	push	r28
 30e:	df 93       	push	r29
 310:	6b 01       	movw	r12, r22
 312:	8a 01       	movw	r16, r20
	if (i2c_start(address | I2C_WRITE)) return 1;
 314:	bf df       	rcall	.-130    	; 0x294 <i2c_start>
 316:	f8 2e       	mov	r15, r24
 318:	81 11       	cpse	r24, r1
 31a:	17 c0       	rjmp	.+46     	; 0x34a <i2c_transmit+0x48>
	
	for (uint16_t i = 0; i < length; i++)
 31c:	01 15       	cp	r16, r1
 31e:	11 05       	cpc	r17, r1
 320:	81 f0       	breq	.+32     	; 0x342 <i2c_transmit+0x40>
 322:	e6 01       	movw	r28, r12
 324:	0c 0d       	add	r16, r12
 326:	1d 1d       	adc	r17, r13
	{
		if (i2c_write(data[i])) return 1;
 328:	89 91       	ld	r24, Y+
 32a:	d9 df       	rcall	.-78     	; 0x2de <i2c_write>
 32c:	81 11       	cpse	r24, r1
 32e:	10 c0       	rjmp	.+32     	; 0x350 <i2c_transmit+0x4e>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 330:	8f e9       	ldi	r24, 0x9F	; 159
 332:	9f e0       	ldi	r25, 0x0F	; 15
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <i2c_transmit+0x32>
 338:	00 c0       	rjmp	.+0      	; 0x33a <i2c_transmit+0x38>
 33a:	00 00       	nop

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
	
	for (uint16_t i = 0; i < length; i++)
 33c:	0c 17       	cp	r16, r28
 33e:	1d 07       	cpc	r17, r29
 340:	99 f7       	brne	.-26     	; 0x328 <i2c_transmit+0x26>
}

void i2c_stop(void)
{
	// transmit STOP condition
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 342:	84 e9       	ldi	r24, 0x94	; 148
 344:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
 348:	05 c0       	rjmp	.+10     	; 0x354 <i2c_transmit+0x52>
	return TWDR;
}

uint8_t i2c_transmit(uint8_t address, uint8_t* data, uint16_t length)
{
	if (i2c_start(address | I2C_WRITE)) return 1;
 34a:	ff 24       	eor	r15, r15
 34c:	f3 94       	inc	r15
 34e:	02 c0       	rjmp	.+4      	; 0x354 <i2c_transmit+0x52>
	
	for (uint16_t i = 0; i < length; i++)
	{
		if (i2c_write(data[i])) return 1;
 350:	ff 24       	eor	r15, r15
 352:	f3 94       	inc	r15
	}
	
	i2c_stop();
	
	return 0;
}
 354:	8f 2d       	mov	r24, r15
 356:	df 91       	pop	r29
 358:	cf 91       	pop	r28
 35a:	1f 91       	pop	r17
 35c:	0f 91       	pop	r16
 35e:	ff 90       	pop	r15
 360:	df 90       	pop	r13
 362:	cf 90       	pop	r12
 364:	08 95       	ret

00000366 <motorA>:
	_delay_ms(1000);
}

void motorC2()	// 잠금장치 ON OFF
{
	OCR1C = 1000;	// 돌아가기 전으로
 366:	8c e1       	ldi	r24, 0x1C	; 28
 368:	9c e0       	ldi	r25, 0x0C	; 12
 36a:	9b bd       	out	0x2b, r25	; 43
 36c:	8a bd       	out	0x2a, r24	; 42
 36e:	2f ef       	ldi	r18, 0xFF	; 255
 370:	83 ed       	ldi	r24, 0xD3	; 211
 372:	90 e3       	ldi	r25, 0x30	; 48
 374:	21 50       	subi	r18, 0x01	; 1
 376:	80 40       	sbci	r24, 0x00	; 0
 378:	90 40       	sbci	r25, 0x00	; 0
 37a:	e1 f7       	brne	.-8      	; 0x374 <motorA+0xe>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <motorA+0x18>
 37e:	00 00       	nop
 380:	88 ee       	ldi	r24, 0xE8	; 232
 382:	93 e0       	ldi	r25, 0x03	; 3
 384:	9b bd       	out	0x2b, r25	; 43
 386:	8a bd       	out	0x2a, r24	; 42
 388:	2f ef       	ldi	r18, 0xFF	; 255
 38a:	83 ed       	ldi	r24, 0xD3	; 211
 38c:	90 e3       	ldi	r25, 0x30	; 48
 38e:	21 50       	subi	r18, 0x01	; 1
 390:	80 40       	sbci	r24, 0x00	; 0
 392:	90 40       	sbci	r25, 0x00	; 0
 394:	e1 f7       	brne	.-8      	; 0x38e <motorA+0x28>
 396:	00 c0       	rjmp	.+0      	; 0x398 <motorA+0x32>
 398:	00 00       	nop
 39a:	08 95       	ret

0000039c <motorB>:
 39c:	8c e1       	ldi	r24, 0x1C	; 28
 39e:	9c e0       	ldi	r25, 0x0C	; 12
 3a0:	99 bd       	out	0x29, r25	; 41
 3a2:	88 bd       	out	0x28, r24	; 40
 3a4:	2f ef       	ldi	r18, 0xFF	; 255
 3a6:	83 ed       	ldi	r24, 0xD3	; 211
 3a8:	90 e3       	ldi	r25, 0x30	; 48
 3aa:	21 50       	subi	r18, 0x01	; 1
 3ac:	80 40       	sbci	r24, 0x00	; 0
 3ae:	90 40       	sbci	r25, 0x00	; 0
 3b0:	e1 f7       	brne	.-8      	; 0x3aa <motorB+0xe>
 3b2:	00 c0       	rjmp	.+0      	; 0x3b4 <motorB+0x18>
 3b4:	00 00       	nop
 3b6:	88 ee       	ldi	r24, 0xE8	; 232
 3b8:	93 e0       	ldi	r25, 0x03	; 3
 3ba:	99 bd       	out	0x29, r25	; 41
 3bc:	88 bd       	out	0x28, r24	; 40
 3be:	2f ef       	ldi	r18, 0xFF	; 255
 3c0:	83 ed       	ldi	r24, 0xD3	; 211
 3c2:	90 e3       	ldi	r25, 0x30	; 48
 3c4:	21 50       	subi	r18, 0x01	; 1
 3c6:	80 40       	sbci	r24, 0x00	; 0
 3c8:	90 40       	sbci	r25, 0x00	; 0
 3ca:	e1 f7       	brne	.-8      	; 0x3c4 <motorB+0x28>
 3cc:	00 c0       	rjmp	.+0      	; 0x3ce <motorB+0x32>
 3ce:	00 00       	nop
 3d0:	08 95       	ret

000003d2 <motorC>:
 3d2:	8c e1       	ldi	r24, 0x1C	; 28
 3d4:	9c e0       	ldi	r25, 0x0C	; 12
 3d6:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 3da:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 3de:	2f ef       	ldi	r18, 0xFF	; 255
 3e0:	83 ed       	ldi	r24, 0xD3	; 211
 3e2:	90 e3       	ldi	r25, 0x30	; 48
 3e4:	21 50       	subi	r18, 0x01	; 1
 3e6:	80 40       	sbci	r24, 0x00	; 0
 3e8:	90 40       	sbci	r25, 0x00	; 0
 3ea:	e1 f7       	brne	.-8      	; 0x3e4 <motorC+0x12>
 3ec:	00 c0       	rjmp	.+0      	; 0x3ee <motorC+0x1c>
 3ee:	00 00       	nop
 3f0:	08 95       	ret

000003f2 <__vector_7>:
}

ISR(INT6_vect) // PORTD0 포토 인터럽트0
{
 3f2:	1f 92       	push	r1
 3f4:	0f 92       	push	r0
 3f6:	0f b6       	in	r0, 0x3f	; 63
 3f8:	0f 92       	push	r0
 3fa:	11 24       	eor	r1, r1
 3fc:	8f 93       	push	r24
 3fe:	9f 93       	push	r25
	check0 = 1;
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	90 93 33 01 	sts	0x0133, r25	; 0x800133 <check0+0x1>
 408:	80 93 32 01 	sts	0x0132, r24	; 0x800132 <check0>
}
 40c:	9f 91       	pop	r25
 40e:	8f 91       	pop	r24
 410:	0f 90       	pop	r0
 412:	0f be       	out	0x3f, r0	; 63
 414:	0f 90       	pop	r0
 416:	1f 90       	pop	r1
 418:	18 95       	reti

0000041a <__vector_8>:

ISR(INT7_vect) // PORTD1 포토 인터럽트1
{
 41a:	1f 92       	push	r1
 41c:	0f 92       	push	r0
 41e:	0f b6       	in	r0, 0x3f	; 63
 420:	0f 92       	push	r0
 422:	11 24       	eor	r1, r1
 424:	8f 93       	push	r24
 426:	9f 93       	push	r25
	check1 = 1;
 428:	81 e0       	ldi	r24, 0x01	; 1
 42a:	90 e0       	ldi	r25, 0x00	; 0
 42c:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <check1+0x1>
 430:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <check1>
}
 434:	9f 91       	pop	r25
 436:	8f 91       	pop	r24
 438:	0f 90       	pop	r0
 43a:	0f be       	out	0x3f, r0	; 63
 43c:	0f 90       	pop	r0
 43e:	1f 90       	pop	r1
 440:	18 95       	reti

00000442 <__vector_18>:

ISR(USART0_RX_vect){	// 인터럽트 수신 // UCSR0B 에 RXCIE = 1 해야함.
 442:	1f 92       	push	r1
 444:	0f 92       	push	r0
 446:	0f b6       	in	r0, 0x3f	; 63
 448:	0f 92       	push	r0
 44a:	11 24       	eor	r1, r1
 44c:	0b b6       	in	r0, 0x3b	; 59
 44e:	0f 92       	push	r0
 450:	2f 93       	push	r18
 452:	3f 93       	push	r19
 454:	4f 93       	push	r20
 456:	5f 93       	push	r21
 458:	6f 93       	push	r22
 45a:	7f 93       	push	r23
 45c:	8f 93       	push	r24
 45e:	9f 93       	push	r25
 460:	af 93       	push	r26
 462:	bf 93       	push	r27
 464:	ef 93       	push	r30
 466:	ff 93       	push	r31
	isr_receive=UDR0;
 468:	8c b1       	in	r24, 0x0c	; 12
 46a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <isr_receive>

	switch(isr_receive) { 	// o:open, c:close, A:a약 강제, B:b약 강제
 46e:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <isr_receive>
 472:	82 35       	cpi	r24, 0x52	; 82
 474:	99 f1       	breq	.+102    	; 0x4dc <__vector_18+0x9a>
 476:	28 f4       	brcc	.+10     	; 0x482 <__vector_18+0x40>
 478:	81 34       	cpi	r24, 0x41	; 65
 47a:	99 f0       	breq	.+38     	; 0x4a2 <__vector_18+0x60>
 47c:	82 34       	cpi	r24, 0x42	; 66
 47e:	e1 f0       	breq	.+56     	; 0x4b8 <__vector_18+0x76>
 480:	31 c0       	rjmp	.+98     	; 0x4e4 <__vector_18+0xa2>
 482:	8f 36       	cpi	r24, 0x6F	; 111
 484:	29 f0       	breq	.+10     	; 0x490 <__vector_18+0x4e>
 486:	82 37       	cpi	r24, 0x72	; 114
 488:	21 f1       	breq	.+72     	; 0x4d2 <__vector_18+0x90>
 48a:	83 36       	cpi	r24, 0x63	; 99
 48c:	59 f5       	brne	.+86     	; 0x4e4 <__vector_18+0xa2>
 48e:	02 c0       	rjmp	.+4      	; 0x494 <__vector_18+0x52>
		case 'o':
			motorC();
 490:	a0 df       	rcall	.-192    	; 0x3d2 <motorC>
			break;
 492:	28 c0       	rjmp	.+80     	; 0x4e4 <__vector_18+0xa2>
	_delay_ms(1000);
}

void motorC2()	// 잠금장치 ON OFF
{
	OCR1C = 1000;	// 돌아가기 전으로
 494:	88 ee       	ldi	r24, 0xE8	; 232
 496:	93 e0       	ldi	r25, 0x03	; 3
 498:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
 49c:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
 4a0:	21 c0       	rjmp	.+66     	; 0x4e4 <__vector_18+0xa2>
			break;
		case 'c':
			motorC2();
			break;
		case 'A':
			check_time = 1;
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <check_time+0x1>
 4aa:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <check_time>
			motor_sel = 1;
 4ae:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <motor_sel+0x1>
 4b2:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <motor_sel>
			break;
 4b6:	16 c0       	rjmp	.+44     	; 0x4e4 <__vector_18+0xa2>
		case 'B':
			check_time = 1;
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	90 93 2b 01 	sts	0x012B, r25	; 0x80012b <check_time+0x1>
 4c0:	80 93 2a 01 	sts	0x012A, r24	; 0x80012a <check_time>
			motor_sel = 2;
 4c4:	82 e0       	ldi	r24, 0x02	; 2
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <motor_sel+0x1>
 4cc:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <motor_sel>
			break;
 4d0:	09 c0       	rjmp	.+18     	; 0x4e4 <__vector_18+0xa2>
		case 'r':
			yak_cnt0 = 0;
 4d2:	10 92 27 01 	sts	0x0127, r1	; 0x800127 <yak_cnt0+0x1>
 4d6:	10 92 26 01 	sts	0x0126, r1	; 0x800126 <yak_cnt0>
			break;
 4da:	04 c0       	rjmp	.+8      	; 0x4e4 <__vector_18+0xa2>
		case 'R':
			yak_cnt1 = 0;
 4dc:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <__data_end+0x1>
 4e0:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <__data_end>
			break;
	}
}
 4e4:	ff 91       	pop	r31
 4e6:	ef 91       	pop	r30
 4e8:	bf 91       	pop	r27
 4ea:	af 91       	pop	r26
 4ec:	9f 91       	pop	r25
 4ee:	8f 91       	pop	r24
 4f0:	7f 91       	pop	r23
 4f2:	6f 91       	pop	r22
 4f4:	5f 91       	pop	r21
 4f6:	4f 91       	pop	r20
 4f8:	3f 91       	pop	r19
 4fa:	2f 91       	pop	r18
 4fc:	0f 90       	pop	r0
 4fe:	0b be       	out	0x3b, r0	; 59
 500:	0f 90       	pop	r0
 502:	0f be       	out	0x3f, r0	; 63
 504:	0f 90       	pop	r0
 506:	1f 90       	pop	r1
 508:	18 95       	reti

0000050a <uart_init>:

void uart_init() {
	UCSR0A=0x00;
 50a:	1b b8       	out	0x0b, r1	; 11
	// ...
	UCSR0B=0x98; // 0b0001 1000 -> 0b1001 1000 = 0x98
 50c:	88 e9       	ldi	r24, 0x98	; 152
 50e:	8a b9       	out	0x0a, r24	; 10
	// RXCIE, RXEN, TXEN
	UCSR0C=0x06;
 510:	86 e0       	ldi	r24, 0x06	; 6
 512:	80 93 95 00 	sts	0x0095, r24	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
	// 8Bit
	UBRR0H=0;
 516:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	// 9600
	UBRR0L=103;
 51a:	87 e6       	ldi	r24, 0x67	; 103
 51c:	89 b9       	out	0x09, r24	; 9
	// 9600
	sei();
 51e:	78 94       	sei
 520:	08 95       	ret

00000522 <uart_send>:
}

void uart_send(char data)
{
	while(!(UCSR0A & (1<<UDRE0)));
 522:	5d 9b       	sbis	0x0b, 5	; 11
 524:	fe cf       	rjmp	.-4      	; 0x522 <uart_send>
	UDR0 = data;
 526:	8c b9       	out	0x0c, r24	; 12
 528:	08 95       	ret

0000052a <uart_receive>:
}

char uart_receive(void)
{
	while(!(UCSR0A & 0x80));
 52a:	5f 9b       	sbis	0x0b, 7	; 11
 52c:	fe cf       	rjmp	.-4      	; 0x52a <uart_receive>
	//수신완료 flag 비트가 1되면 정지
	return UDR0;
 52e:	8c b1       	in	r24, 0x0c	; 12
	//UART0번 사용
}
 530:	08 95       	ret

00000532 <main>:

int main(void)
{
 532:	cf 93       	push	r28
 534:	df 93       	push	r29
 536:	cd b7       	in	r28, 0x3d	; 61
 538:	de b7       	in	r29, 0x3e	; 62
 53a:	a0 97       	sbiw	r28, 0x20	; 32
 53c:	0f b6       	in	r0, 0x3f	; 63
 53e:	f8 94       	cli
 540:	de bf       	out	0x3e, r29	; 62
 542:	0f be       	out	0x3f, r0	; 63
 544:	cd bf       	out	0x3d, r28	; 61
	DDRB=0b11100000;   // PB567 out
 546:	80 ee       	ldi	r24, 0xE0	; 224
 548:	87 bb       	out	0x17, r24	; 23
	TCCR1A=0b10101010; TCCR1B=0x1A;  ICR1=19999; 
 54a:	8a ea       	ldi	r24, 0xAA	; 170
 54c:	8f bd       	out	0x2f, r24	; 47
 54e:	8a e1       	ldi	r24, 0x1A	; 26
 550:	8e bd       	out	0x2e, r24	; 46
 552:	8f e1       	ldi	r24, 0x1F	; 31
 554:	9e e4       	ldi	r25, 0x4E	; 78
 556:	97 bd       	out	0x27, r25	; 39
 558:	86 bd       	out	0x26, r24	; 38
	// OCR1A -> OC Clear / Fast PWM TOP = ICR1 / 8분주
	// OCR1A=3000; OCR1B=3000;
	// TCCR1B=0x1A; OCR1A=3000; ICR1=19999;
	uart_init();
 55a:	d7 df       	rcall	.-82     	; 0x50a <uart_init>

	// 외부 인터럽트 초기화
	EICRA=0b00000000; //외부인터럽트 01번핀 트리거 신호를  falling edge 설정
 55c:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB=0b10100000; 
 560:	80 ea       	ldi	r24, 0xA0	; 160
 562:	8a bf       	out	0x3a, r24	; 58
	EIMSK=0b11000000; //INT6, 7을 외부 인터럽트로 사용하기 위해서	
 564:	80 ec       	ldi	r24, 0xC0	; 192
 566:	89 bf       	out	0x39, r24	; 57
	
	sei();
	weight_init();	// 무게 측정 코드 레지스터 설정 함수
 568:	78 94       	sei
	i2c_lcd_init();	// clcd i2c 통신 초기화
 56a:	80 de       	rcall	.-768    	; 0x26c <weight_init>
 56c:	ee dd       	rcall	.-1060   	; 0x14a <i2c_lcd_init>
	
	char str0[16] = "LHJ PJH SAMRTYAK";
 56e:	80 e1       	ldi	r24, 0x10	; 16
 570:	e1 e0       	ldi	r30, 0x01	; 1
 572:	f1 e0       	ldi	r31, 0x01	; 1
 574:	de 01       	movw	r26, r28
 576:	11 96       	adiw	r26, 0x01	; 1
 578:	01 90       	ld	r0, Z+
 57a:	0d 92       	st	X+, r0
 57c:	8a 95       	dec	r24
 57e:	e1 f7       	brne	.-8      	; 0x578 <main+0x46>
	char str1[16] = "0";
 580:	80 e3       	ldi	r24, 0x30	; 48
 582:	90 e0       	ldi	r25, 0x00	; 0
 584:	9a 8b       	std	Y+18, r25	; 0x12
 586:	89 8b       	std	Y+17, r24	; 0x11
 588:	fe 01       	movw	r30, r28
 58a:	73 96       	adiw	r30, 0x13	; 19
 58c:	8e e0       	ldi	r24, 0x0E	; 14
 58e:	df 01       	movw	r26, r30
 590:	1d 92       	st	X+, r1
 592:	8a 95       	dec	r24
 594:	e9 f7       	brne	.-6      	; 0x590 <main+0x5e>
	i2c_lcd_string(0, 0, str0);
 596:	ae 01       	movw	r20, r28
 598:	4f 5f       	subi	r20, 0xFF	; 255
 59a:	5f 4f       	sbci	r21, 0xFF	; 255
 59c:	60 e0       	ldi	r22, 0x00	; 0
 59e:	80 e0       	ldi	r24, 0x00	; 0
 5a0:	56 de       	rcall	.-852    	; 0x24e <i2c_lcd_string>
	i2c_lcd_string(1, 0, str1);
 5a2:	ae 01       	movw	r20, r28
 5a4:	4f 5e       	subi	r20, 0xEF	; 239
 5a6:	5f 4f       	sbci	r21, 0xFF	; 255
 5a8:	60 e0       	ldi	r22, 0x00	; 0
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	50 de       	rcall	.-864    	; 0x24e <i2c_lcd_string>
// 		i2c_lcd_string(0, 0, str0);	//	

		// 약을 체크하는 코드 넣어야 함 (check_yak 변하게)
		// 무게는 weight = ReadCout()/4

		check_yak = 1;	// 일단 약은 항상 있다고..
 5ae:	01 e0       	ldi	r16, 0x01	; 1
 5b0:	10 e0       	ldi	r17, 0x00	; 0
				}
				if(check1 == 1){
					yak_cnt1 += 1;
				}
				// LCD에 뿌릴 약 먹은 갯수
				sprintf(str1, "YAK0:%d / YAK1:%d", yak_cnt0, yak_cnt1);	
 5b2:	0f 2e       	mov	r0, r31
 5b4:	f2 e1       	ldi	r31, 0x12	; 18
 5b6:	cf 2e       	mov	r12, r31
 5b8:	f1 e0       	ldi	r31, 0x01	; 1
 5ba:	df 2e       	mov	r13, r31
 5bc:	f0 2d       	mov	r31, r0
 5be:	7e 01       	movw	r14, r28
 5c0:	b1 e1       	ldi	r27, 0x11	; 17
 5c2:	eb 0e       	add	r14, r27
 5c4:	f1 1c       	adc	r15, r1
				check_time = 1;
				motor_sel = 1;	// a모터 선택
			} else if(receive == 'b'){
				// B약 시간이 맞으면 b 를 받음 (알람일때)
				check_time = 1;
				motor_sel = 2;	// b모터 선택
 5c6:	68 94       	set
 5c8:	aa 24       	eor	r10, r10
 5ca:	a1 f8       	bld	r10, 1
 5cc:	b1 2c       	mov	r11, r1
// 		i2c_lcd_string(0, 0, str0);	//	

		// 약을 체크하는 코드 넣어야 함 (check_yak 변하게)
		// 무게는 weight = ReadCout()/4

		check_yak = 1;	// 일단 약은 항상 있다고..
 5ce:	10 93 2d 01 	sts	0x012D, r17	; 0x80012d <check_yak+0x1>
 5d2:	00 93 2c 01 	sts	0x012C, r16	; 0x80012c <check_yak>

		if(check_yak == 1)
 5d6:	80 91 2c 01 	lds	r24, 0x012C	; 0x80012c <check_yak>
 5da:	90 91 2d 01 	lds	r25, 0x012D	; 0x80012d <check_yak+0x1>
 5de:	01 97       	sbiw	r24, 0x01	; 1
 5e0:	09 f0       	breq	.+2      	; 0x5e4 <main+0xb2>
		{
			// 어플에서 시간이 맞으면 블루투스로 받아서 check_time 변하게 해야함 

			receive = uart_receive();	// 폴링방식이여서 어플에서 안보내면 여기서 멈춤
 5e2:	8e c0       	rjmp	.+284    	; 0x700 <main+0x1ce>
 5e4:	a2 df       	rcall	.-188    	; 0x52a <uart_receive>
 5e6:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <receive>
				check_time = 1;
				motor_sel = 2;	// b모터 선택
			}
			*/

			if(receive == 'a'){
 5ea:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <receive>
 5ee:	81 36       	cpi	r24, 0x61	; 97
 5f0:	49 f4       	brne	.+18     	; 0x604 <main+0xd2>
				// A약 시간이 맞으면 a 를 받음 (알람일때)
				check_time = 1;
 5f2:	10 93 2b 01 	sts	0x012B, r17	; 0x80012b <check_time+0x1>
 5f6:	00 93 2a 01 	sts	0x012A, r16	; 0x80012a <check_time>
				motor_sel = 1;	// a모터 선택
 5fa:	10 93 29 01 	sts	0x0129, r17	; 0x800129 <motor_sel+0x1>
 5fe:	00 93 28 01 	sts	0x0128, r16	; 0x800128 <motor_sel>
 602:	0c c0       	rjmp	.+24     	; 0x61c <main+0xea>
			} else if(receive == 'b'){
 604:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <receive>
 608:	82 36       	cpi	r24, 0x62	; 98
 60a:	41 f4       	brne	.+16     	; 0x61c <main+0xea>
				// B약 시간이 맞으면 b 를 받음 (알람일때)
				check_time = 1;
 60c:	10 93 2b 01 	sts	0x012B, r17	; 0x80012b <check_time+0x1>
 610:	00 93 2a 01 	sts	0x012A, r16	; 0x80012a <check_time>
				motor_sel = 2;	// b모터 선택
 614:	b0 92 29 01 	sts	0x0129, r11	; 0x800129 <motor_sel+0x1>
 618:	a0 92 28 01 	sts	0x0128, r10	; 0x800128 <motor_sel>
			}
			
			// 어플에서 알람시간이 안맞더라도 a, b 보내는 버튼 만들기 필요 -- 인터럽트로 만듦
			// ,,,

			if(check_time == 1)
 61c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <check_time>
 620:	90 91 2b 01 	lds	r25, 0x012B	; 0x80012b <check_time+0x1>
 624:	01 97       	sbiw	r24, 0x01	; 1
 626:	99 f6       	brne	.-90     	; 0x5ce <main+0x9c>
			{
				/*주요 로직*/
				switch(motor_sel)	// motor_sel=1 : A, 2:B
 628:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <motor_sel>
 62c:	90 91 29 01 	lds	r25, 0x0129	; 0x800129 <motor_sel+0x1>
 630:	81 30       	cpi	r24, 0x01	; 1
 632:	91 05       	cpc	r25, r1
 634:	49 f0       	breq	.+18     	; 0x648 <main+0x116>
 636:	02 97       	sbiw	r24, 0x02	; 2
 638:	f1 f4       	brne	.+60     	; 0x676 <main+0x144>
						}	// 약이 떨어질 때 까지 motorA 돌리기 check0 = 1이 되면 while 문 끝남
						motorC();	// 잠금장치 풀기
						break;
					
					case 2 :
						while (check1 == 0)		// check0,1 변수는 포토인터럽트 모듈의 인터럽트에 의해서 변경됨
 63a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <check1>
 63e:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <check1+0x1>
 642:	89 2b       	or	r24, r25
 644:	81 f0       	breq	.+32     	; 0x666 <main+0x134>
 646:	16 c0       	rjmp	.+44     	; 0x674 <main+0x142>
			{
				/*주요 로직*/
				switch(motor_sel)	// motor_sel=1 : A, 2:B
				{
					case 1 :
						while (check0 == 0)		// check0,1 변수는 포토인터럽트 모듈의 인터럽트에 의해서 변경됨
 648:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <check0>
 64c:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <check0+0x1>
 650:	89 2b       	or	r24, r25
						{
							motorA();
 652:	39 f4       	brne	.+14     	; 0x662 <main+0x130>
			{
				/*주요 로직*/
				switch(motor_sel)	// motor_sel=1 : A, 2:B
				{
					case 1 :
						while (check0 == 0)		// check0,1 변수는 포토인터럽트 모듈의 인터럽트에 의해서 변경됨
 654:	88 de       	rcall	.-752    	; 0x366 <motorA>
 656:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <check0>
 65a:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <check0+0x1>
						{
							motorA();
						}	// 약이 떨어질 때 까지 motorA 돌리기 check0 = 1이 되면 while 문 끝남
						motorC();	// 잠금장치 풀기
 65e:	89 2b       	or	r24, r25
 660:	c9 f3       	breq	.-14     	; 0x654 <main+0x122>
						break;
					
					case 2 :
						while (check1 == 0)		// check0,1 변수는 포토인터럽트 모듈의 인터럽트에 의해서 변경됨
						{
							motorB();
 662:	b7 de       	rcall	.-658    	; 0x3d2 <motorC>
 664:	08 c0       	rjmp	.+16     	; 0x676 <main+0x144>
						}	// 약이 떨어질 때 까지 motorA 돌리기 check0 = 1이 되면 while 문 끝남
						motorC();	// 잠금장치 풀기
						break;
					
					case 2 :
						while (check1 == 0)		// check0,1 변수는 포토인터럽트 모듈의 인터럽트에 의해서 변경됨
 666:	9a de       	rcall	.-716    	; 0x39c <motorB>
 668:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <check1>
 66c:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <check1+0x1>
 670:	89 2b       	or	r24, r25
						{
							motorB();
						}	// 약이 떨어질 때 까지 motorB 돌리기 check1 = 1이 되면 while 문 끝남
						motorC();	// 잠금장치 풀기
 672:	c9 f3       	breq	.-14     	; 0x666 <main+0x134>
 674:	ae de       	rcall	.-676    	; 0x3d2 <motorC>
					default:
						break;
				}
				//약체크 코드 - 약을 한번 떨어 뜨릴 때 마다 체크 하기?
				// 떨어질 때 마다 카운트
				if(check0 == 1){
 676:	80 91 32 01 	lds	r24, 0x0132	; 0x800132 <check0>
 67a:	90 91 33 01 	lds	r25, 0x0133	; 0x800133 <check0+0x1>
 67e:	01 97       	sbiw	r24, 0x01	; 1
 680:	49 f4       	brne	.+18     	; 0x694 <main+0x162>
					yak_cnt0 += 1;
 682:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <yak_cnt0>
 686:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <yak_cnt0+0x1>
 68a:	01 96       	adiw	r24, 0x01	; 1
 68c:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <yak_cnt0+0x1>
 690:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <yak_cnt0>
				}
				if(check1 == 1){
 694:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <check1>
 698:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <check1+0x1>
 69c:	01 97       	sbiw	r24, 0x01	; 1
 69e:	49 f4       	brne	.+18     	; 0x6b2 <main+0x180>
					yak_cnt1 += 1;
 6a0:	80 91 24 01 	lds	r24, 0x0124	; 0x800124 <__data_end>
 6a4:	90 91 25 01 	lds	r25, 0x0125	; 0x800125 <__data_end+0x1>
 6a8:	01 96       	adiw	r24, 0x01	; 1
 6aa:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <__data_end+0x1>
 6ae:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <__data_end>
				}
				// LCD에 뿌릴 약 먹은 갯수
				sprintf(str1, "YAK0:%d / YAK1:%d", yak_cnt0, yak_cnt1);	
 6b2:	20 91 24 01 	lds	r18, 0x0124	; 0x800124 <__data_end>
 6b6:	30 91 25 01 	lds	r19, 0x0125	; 0x800125 <__data_end+0x1>
 6ba:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <yak_cnt0>
 6be:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <yak_cnt0+0x1>
 6c2:	3f 93       	push	r19
 6c4:	2f 93       	push	r18
 6c6:	9f 93       	push	r25
 6c8:	8f 93       	push	r24
 6ca:	df 92       	push	r13
 6cc:	cf 92       	push	r12
 6ce:	ff 92       	push	r15
 6d0:	ef 92       	push	r14
				i2c_lcd_string(1, 0, str1);
 6d2:	19 d0       	rcall	.+50     	; 0x706 <sprintf>
 6d4:	a7 01       	movw	r20, r14
 6d6:	60 e0       	ldi	r22, 0x00	; 0
 6d8:	81 e0       	ldi	r24, 0x01	; 1
 6da:	b9 dd       	rcall	.-1166   	; 0x24e <i2c_lcd_string>
				// 약이 떨어 졌으니..
				check0=0; check1=0;	// 다시 약 체크상황 없는걸로 초기화
 6dc:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <check0+0x1>
 6e0:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <check0>
 6e4:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <check1+0x1>
 6e8:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <check1>
				check_time=0;		// 타임이 이제 아닌걸로..	
 6ec:	10 92 2b 01 	sts	0x012B, r1	; 0x80012b <check_time+0x1>
 6f0:	10 92 2a 01 	sts	0x012A, r1	; 0x80012a <check_time>
 6f4:	0f b6       	in	r0, 0x3f	; 63
 6f6:	f8 94       	cli
 6f8:	de bf       	out	0x3e, r29	; 62
 6fa:	0f be       	out	0x3f, r0	; 63
 6fc:	cd bf       	out	0x3d, r28	; 61
			} else { /*...*/ }
		} else { uart_send('n'); } // 약이없다고 알람보내기 어플한테 n을 보냄
 6fe:	67 cf       	rjmp	.-306    	; 0x5ce <main+0x9c>
 700:	8e e6       	ldi	r24, 0x6E	; 110
 702:	0f df       	rcall	.-482    	; 0x522 <uart_send>
 704:	64 cf       	rjmp	.-312    	; 0x5ce <main+0x9c>

00000706 <sprintf>:
 706:	0f 93       	push	r16
 708:	1f 93       	push	r17
 70a:	cf 93       	push	r28
 70c:	df 93       	push	r29
 70e:	cd b7       	in	r28, 0x3d	; 61
 710:	de b7       	in	r29, 0x3e	; 62
 712:	2e 97       	sbiw	r28, 0x0e	; 14
 714:	0f b6       	in	r0, 0x3f	; 63
 716:	f8 94       	cli
 718:	de bf       	out	0x3e, r29	; 62
 71a:	0f be       	out	0x3f, r0	; 63
 71c:	cd bf       	out	0x3d, r28	; 61
 71e:	0d 89       	ldd	r16, Y+21	; 0x15
 720:	1e 89       	ldd	r17, Y+22	; 0x16
 722:	86 e0       	ldi	r24, 0x06	; 6
 724:	8c 83       	std	Y+4, r24	; 0x04
 726:	1a 83       	std	Y+2, r17	; 0x02
 728:	09 83       	std	Y+1, r16	; 0x01
 72a:	8f ef       	ldi	r24, 0xFF	; 255
 72c:	9f e7       	ldi	r25, 0x7F	; 127
 72e:	9e 83       	std	Y+6, r25	; 0x06
 730:	8d 83       	std	Y+5, r24	; 0x05
 732:	ae 01       	movw	r20, r28
 734:	47 5e       	subi	r20, 0xE7	; 231
 736:	5f 4f       	sbci	r21, 0xFF	; 255
 738:	6f 89       	ldd	r22, Y+23	; 0x17
 73a:	78 8d       	ldd	r23, Y+24	; 0x18
 73c:	ce 01       	movw	r24, r28
 73e:	01 96       	adiw	r24, 0x01	; 1
 740:	10 d0       	rcall	.+32     	; 0x762 <vfprintf>
 742:	ef 81       	ldd	r30, Y+7	; 0x07
 744:	f8 85       	ldd	r31, Y+8	; 0x08
 746:	e0 0f       	add	r30, r16
 748:	f1 1f       	adc	r31, r17
 74a:	10 82       	st	Z, r1
 74c:	2e 96       	adiw	r28, 0x0e	; 14
 74e:	0f b6       	in	r0, 0x3f	; 63
 750:	f8 94       	cli
 752:	de bf       	out	0x3e, r29	; 62
 754:	0f be       	out	0x3f, r0	; 63
 756:	cd bf       	out	0x3d, r28	; 61
 758:	df 91       	pop	r29
 75a:	cf 91       	pop	r28
 75c:	1f 91       	pop	r17
 75e:	0f 91       	pop	r16
 760:	08 95       	ret

00000762 <vfprintf>:
 762:	2f 92       	push	r2
 764:	3f 92       	push	r3
 766:	4f 92       	push	r4
 768:	5f 92       	push	r5
 76a:	6f 92       	push	r6
 76c:	7f 92       	push	r7
 76e:	8f 92       	push	r8
 770:	9f 92       	push	r9
 772:	af 92       	push	r10
 774:	bf 92       	push	r11
 776:	cf 92       	push	r12
 778:	df 92       	push	r13
 77a:	ef 92       	push	r14
 77c:	ff 92       	push	r15
 77e:	0f 93       	push	r16
 780:	1f 93       	push	r17
 782:	cf 93       	push	r28
 784:	df 93       	push	r29
 786:	cd b7       	in	r28, 0x3d	; 61
 788:	de b7       	in	r29, 0x3e	; 62
 78a:	2b 97       	sbiw	r28, 0x0b	; 11
 78c:	0f b6       	in	r0, 0x3f	; 63
 78e:	f8 94       	cli
 790:	de bf       	out	0x3e, r29	; 62
 792:	0f be       	out	0x3f, r0	; 63
 794:	cd bf       	out	0x3d, r28	; 61
 796:	6c 01       	movw	r12, r24
 798:	7b 01       	movw	r14, r22
 79a:	8a 01       	movw	r16, r20
 79c:	fc 01       	movw	r30, r24
 79e:	17 82       	std	Z+7, r1	; 0x07
 7a0:	16 82       	std	Z+6, r1	; 0x06
 7a2:	83 81       	ldd	r24, Z+3	; 0x03
 7a4:	81 ff       	sbrs	r24, 1
 7a6:	bf c1       	rjmp	.+894    	; 0xb26 <vfprintf+0x3c4>
 7a8:	ce 01       	movw	r24, r28
 7aa:	01 96       	adiw	r24, 0x01	; 1
 7ac:	3c 01       	movw	r6, r24
 7ae:	f6 01       	movw	r30, r12
 7b0:	93 81       	ldd	r25, Z+3	; 0x03
 7b2:	f7 01       	movw	r30, r14
 7b4:	93 fd       	sbrc	r25, 3
 7b6:	85 91       	lpm	r24, Z+
 7b8:	93 ff       	sbrs	r25, 3
 7ba:	81 91       	ld	r24, Z+
 7bc:	7f 01       	movw	r14, r30
 7be:	88 23       	and	r24, r24
 7c0:	09 f4       	brne	.+2      	; 0x7c4 <vfprintf+0x62>
 7c2:	ad c1       	rjmp	.+858    	; 0xb1e <vfprintf+0x3bc>
 7c4:	85 32       	cpi	r24, 0x25	; 37
 7c6:	39 f4       	brne	.+14     	; 0x7d6 <vfprintf+0x74>
 7c8:	93 fd       	sbrc	r25, 3
 7ca:	85 91       	lpm	r24, Z+
 7cc:	93 ff       	sbrs	r25, 3
 7ce:	81 91       	ld	r24, Z+
 7d0:	7f 01       	movw	r14, r30
 7d2:	85 32       	cpi	r24, 0x25	; 37
 7d4:	21 f4       	brne	.+8      	; 0x7de <vfprintf+0x7c>
 7d6:	b6 01       	movw	r22, r12
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	d6 d1       	rcall	.+940    	; 0xb88 <fputc>
 7dc:	e8 cf       	rjmp	.-48     	; 0x7ae <vfprintf+0x4c>
 7de:	91 2c       	mov	r9, r1
 7e0:	21 2c       	mov	r2, r1
 7e2:	31 2c       	mov	r3, r1
 7e4:	ff e1       	ldi	r31, 0x1F	; 31
 7e6:	f3 15       	cp	r31, r3
 7e8:	d8 f0       	brcs	.+54     	; 0x820 <vfprintf+0xbe>
 7ea:	8b 32       	cpi	r24, 0x2B	; 43
 7ec:	79 f0       	breq	.+30     	; 0x80c <vfprintf+0xaa>
 7ee:	38 f4       	brcc	.+14     	; 0x7fe <vfprintf+0x9c>
 7f0:	80 32       	cpi	r24, 0x20	; 32
 7f2:	79 f0       	breq	.+30     	; 0x812 <vfprintf+0xb0>
 7f4:	83 32       	cpi	r24, 0x23	; 35
 7f6:	a1 f4       	brne	.+40     	; 0x820 <vfprintf+0xbe>
 7f8:	23 2d       	mov	r18, r3
 7fa:	20 61       	ori	r18, 0x10	; 16
 7fc:	1d c0       	rjmp	.+58     	; 0x838 <vfprintf+0xd6>
 7fe:	8d 32       	cpi	r24, 0x2D	; 45
 800:	61 f0       	breq	.+24     	; 0x81a <vfprintf+0xb8>
 802:	80 33       	cpi	r24, 0x30	; 48
 804:	69 f4       	brne	.+26     	; 0x820 <vfprintf+0xbe>
 806:	23 2d       	mov	r18, r3
 808:	21 60       	ori	r18, 0x01	; 1
 80a:	16 c0       	rjmp	.+44     	; 0x838 <vfprintf+0xd6>
 80c:	83 2d       	mov	r24, r3
 80e:	82 60       	ori	r24, 0x02	; 2
 810:	38 2e       	mov	r3, r24
 812:	e3 2d       	mov	r30, r3
 814:	e4 60       	ori	r30, 0x04	; 4
 816:	3e 2e       	mov	r3, r30
 818:	2a c0       	rjmp	.+84     	; 0x86e <vfprintf+0x10c>
 81a:	f3 2d       	mov	r31, r3
 81c:	f8 60       	ori	r31, 0x08	; 8
 81e:	1d c0       	rjmp	.+58     	; 0x85a <vfprintf+0xf8>
 820:	37 fc       	sbrc	r3, 7
 822:	2d c0       	rjmp	.+90     	; 0x87e <vfprintf+0x11c>
 824:	20 ed       	ldi	r18, 0xD0	; 208
 826:	28 0f       	add	r18, r24
 828:	2a 30       	cpi	r18, 0x0A	; 10
 82a:	40 f0       	brcs	.+16     	; 0x83c <vfprintf+0xda>
 82c:	8e 32       	cpi	r24, 0x2E	; 46
 82e:	b9 f4       	brne	.+46     	; 0x85e <vfprintf+0xfc>
 830:	36 fc       	sbrc	r3, 6
 832:	75 c1       	rjmp	.+746    	; 0xb1e <vfprintf+0x3bc>
 834:	23 2d       	mov	r18, r3
 836:	20 64       	ori	r18, 0x40	; 64
 838:	32 2e       	mov	r3, r18
 83a:	19 c0       	rjmp	.+50     	; 0x86e <vfprintf+0x10c>
 83c:	36 fe       	sbrs	r3, 6
 83e:	06 c0       	rjmp	.+12     	; 0x84c <vfprintf+0xea>
 840:	8a e0       	ldi	r24, 0x0A	; 10
 842:	98 9e       	mul	r9, r24
 844:	20 0d       	add	r18, r0
 846:	11 24       	eor	r1, r1
 848:	92 2e       	mov	r9, r18
 84a:	11 c0       	rjmp	.+34     	; 0x86e <vfprintf+0x10c>
 84c:	ea e0       	ldi	r30, 0x0A	; 10
 84e:	2e 9e       	mul	r2, r30
 850:	20 0d       	add	r18, r0
 852:	11 24       	eor	r1, r1
 854:	22 2e       	mov	r2, r18
 856:	f3 2d       	mov	r31, r3
 858:	f0 62       	ori	r31, 0x20	; 32
 85a:	3f 2e       	mov	r3, r31
 85c:	08 c0       	rjmp	.+16     	; 0x86e <vfprintf+0x10c>
 85e:	8c 36       	cpi	r24, 0x6C	; 108
 860:	21 f4       	brne	.+8      	; 0x86a <vfprintf+0x108>
 862:	83 2d       	mov	r24, r3
 864:	80 68       	ori	r24, 0x80	; 128
 866:	38 2e       	mov	r3, r24
 868:	02 c0       	rjmp	.+4      	; 0x86e <vfprintf+0x10c>
 86a:	88 36       	cpi	r24, 0x68	; 104
 86c:	41 f4       	brne	.+16     	; 0x87e <vfprintf+0x11c>
 86e:	f7 01       	movw	r30, r14
 870:	93 fd       	sbrc	r25, 3
 872:	85 91       	lpm	r24, Z+
 874:	93 ff       	sbrs	r25, 3
 876:	81 91       	ld	r24, Z+
 878:	7f 01       	movw	r14, r30
 87a:	81 11       	cpse	r24, r1
 87c:	b3 cf       	rjmp	.-154    	; 0x7e4 <vfprintf+0x82>
 87e:	98 2f       	mov	r25, r24
 880:	9f 7d       	andi	r25, 0xDF	; 223
 882:	95 54       	subi	r25, 0x45	; 69
 884:	93 30       	cpi	r25, 0x03	; 3
 886:	28 f4       	brcc	.+10     	; 0x892 <vfprintf+0x130>
 888:	0c 5f       	subi	r16, 0xFC	; 252
 88a:	1f 4f       	sbci	r17, 0xFF	; 255
 88c:	9f e3       	ldi	r25, 0x3F	; 63
 88e:	99 83       	std	Y+1, r25	; 0x01
 890:	0d c0       	rjmp	.+26     	; 0x8ac <vfprintf+0x14a>
 892:	83 36       	cpi	r24, 0x63	; 99
 894:	31 f0       	breq	.+12     	; 0x8a2 <vfprintf+0x140>
 896:	83 37       	cpi	r24, 0x73	; 115
 898:	71 f0       	breq	.+28     	; 0x8b6 <vfprintf+0x154>
 89a:	83 35       	cpi	r24, 0x53	; 83
 89c:	09 f0       	breq	.+2      	; 0x8a0 <vfprintf+0x13e>
 89e:	55 c0       	rjmp	.+170    	; 0x94a <vfprintf+0x1e8>
 8a0:	20 c0       	rjmp	.+64     	; 0x8e2 <vfprintf+0x180>
 8a2:	f8 01       	movw	r30, r16
 8a4:	80 81       	ld	r24, Z
 8a6:	89 83       	std	Y+1, r24	; 0x01
 8a8:	0e 5f       	subi	r16, 0xFE	; 254
 8aa:	1f 4f       	sbci	r17, 0xFF	; 255
 8ac:	88 24       	eor	r8, r8
 8ae:	83 94       	inc	r8
 8b0:	91 2c       	mov	r9, r1
 8b2:	53 01       	movw	r10, r6
 8b4:	12 c0       	rjmp	.+36     	; 0x8da <vfprintf+0x178>
 8b6:	28 01       	movw	r4, r16
 8b8:	f2 e0       	ldi	r31, 0x02	; 2
 8ba:	4f 0e       	add	r4, r31
 8bc:	51 1c       	adc	r5, r1
 8be:	f8 01       	movw	r30, r16
 8c0:	a0 80       	ld	r10, Z
 8c2:	b1 80       	ldd	r11, Z+1	; 0x01
 8c4:	36 fe       	sbrs	r3, 6
 8c6:	03 c0       	rjmp	.+6      	; 0x8ce <vfprintf+0x16c>
 8c8:	69 2d       	mov	r22, r9
 8ca:	70 e0       	ldi	r23, 0x00	; 0
 8cc:	02 c0       	rjmp	.+4      	; 0x8d2 <vfprintf+0x170>
 8ce:	6f ef       	ldi	r22, 0xFF	; 255
 8d0:	7f ef       	ldi	r23, 0xFF	; 255
 8d2:	c5 01       	movw	r24, r10
 8d4:	4e d1       	rcall	.+668    	; 0xb72 <strnlen>
 8d6:	4c 01       	movw	r8, r24
 8d8:	82 01       	movw	r16, r4
 8da:	f3 2d       	mov	r31, r3
 8dc:	ff 77       	andi	r31, 0x7F	; 127
 8de:	3f 2e       	mov	r3, r31
 8e0:	15 c0       	rjmp	.+42     	; 0x90c <vfprintf+0x1aa>
 8e2:	28 01       	movw	r4, r16
 8e4:	22 e0       	ldi	r18, 0x02	; 2
 8e6:	42 0e       	add	r4, r18
 8e8:	51 1c       	adc	r5, r1
 8ea:	f8 01       	movw	r30, r16
 8ec:	a0 80       	ld	r10, Z
 8ee:	b1 80       	ldd	r11, Z+1	; 0x01
 8f0:	36 fe       	sbrs	r3, 6
 8f2:	03 c0       	rjmp	.+6      	; 0x8fa <vfprintf+0x198>
 8f4:	69 2d       	mov	r22, r9
 8f6:	70 e0       	ldi	r23, 0x00	; 0
 8f8:	02 c0       	rjmp	.+4      	; 0x8fe <vfprintf+0x19c>
 8fa:	6f ef       	ldi	r22, 0xFF	; 255
 8fc:	7f ef       	ldi	r23, 0xFF	; 255
 8fe:	c5 01       	movw	r24, r10
 900:	2d d1       	rcall	.+602    	; 0xb5c <strnlen_P>
 902:	4c 01       	movw	r8, r24
 904:	f3 2d       	mov	r31, r3
 906:	f0 68       	ori	r31, 0x80	; 128
 908:	3f 2e       	mov	r3, r31
 90a:	82 01       	movw	r16, r4
 90c:	33 fc       	sbrc	r3, 3
 90e:	19 c0       	rjmp	.+50     	; 0x942 <vfprintf+0x1e0>
 910:	82 2d       	mov	r24, r2
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	88 16       	cp	r8, r24
 916:	99 06       	cpc	r9, r25
 918:	a0 f4       	brcc	.+40     	; 0x942 <vfprintf+0x1e0>
 91a:	b6 01       	movw	r22, r12
 91c:	80 e2       	ldi	r24, 0x20	; 32
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	33 d1       	rcall	.+614    	; 0xb88 <fputc>
 922:	2a 94       	dec	r2
 924:	f5 cf       	rjmp	.-22     	; 0x910 <vfprintf+0x1ae>
 926:	f5 01       	movw	r30, r10
 928:	37 fc       	sbrc	r3, 7
 92a:	85 91       	lpm	r24, Z+
 92c:	37 fe       	sbrs	r3, 7
 92e:	81 91       	ld	r24, Z+
 930:	5f 01       	movw	r10, r30
 932:	b6 01       	movw	r22, r12
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	28 d1       	rcall	.+592    	; 0xb88 <fputc>
 938:	21 10       	cpse	r2, r1
 93a:	2a 94       	dec	r2
 93c:	21 e0       	ldi	r18, 0x01	; 1
 93e:	82 1a       	sub	r8, r18
 940:	91 08       	sbc	r9, r1
 942:	81 14       	cp	r8, r1
 944:	91 04       	cpc	r9, r1
 946:	79 f7       	brne	.-34     	; 0x926 <vfprintf+0x1c4>
 948:	e1 c0       	rjmp	.+450    	; 0xb0c <vfprintf+0x3aa>
 94a:	84 36       	cpi	r24, 0x64	; 100
 94c:	11 f0       	breq	.+4      	; 0x952 <vfprintf+0x1f0>
 94e:	89 36       	cpi	r24, 0x69	; 105
 950:	39 f5       	brne	.+78     	; 0x9a0 <vfprintf+0x23e>
 952:	f8 01       	movw	r30, r16
 954:	37 fe       	sbrs	r3, 7
 956:	07 c0       	rjmp	.+14     	; 0x966 <vfprintf+0x204>
 958:	60 81       	ld	r22, Z
 95a:	71 81       	ldd	r23, Z+1	; 0x01
 95c:	82 81       	ldd	r24, Z+2	; 0x02
 95e:	93 81       	ldd	r25, Z+3	; 0x03
 960:	0c 5f       	subi	r16, 0xFC	; 252
 962:	1f 4f       	sbci	r17, 0xFF	; 255
 964:	08 c0       	rjmp	.+16     	; 0x976 <vfprintf+0x214>
 966:	60 81       	ld	r22, Z
 968:	71 81       	ldd	r23, Z+1	; 0x01
 96a:	07 2e       	mov	r0, r23
 96c:	00 0c       	add	r0, r0
 96e:	88 0b       	sbc	r24, r24
 970:	99 0b       	sbc	r25, r25
 972:	0e 5f       	subi	r16, 0xFE	; 254
 974:	1f 4f       	sbci	r17, 0xFF	; 255
 976:	f3 2d       	mov	r31, r3
 978:	ff 76       	andi	r31, 0x6F	; 111
 97a:	3f 2e       	mov	r3, r31
 97c:	97 ff       	sbrs	r25, 7
 97e:	09 c0       	rjmp	.+18     	; 0x992 <vfprintf+0x230>
 980:	90 95       	com	r25
 982:	80 95       	com	r24
 984:	70 95       	com	r23
 986:	61 95       	neg	r22
 988:	7f 4f       	sbci	r23, 0xFF	; 255
 98a:	8f 4f       	sbci	r24, 0xFF	; 255
 98c:	9f 4f       	sbci	r25, 0xFF	; 255
 98e:	f0 68       	ori	r31, 0x80	; 128
 990:	3f 2e       	mov	r3, r31
 992:	2a e0       	ldi	r18, 0x0A	; 10
 994:	30 e0       	ldi	r19, 0x00	; 0
 996:	a3 01       	movw	r20, r6
 998:	33 d1       	rcall	.+614    	; 0xc00 <__ultoa_invert>
 99a:	88 2e       	mov	r8, r24
 99c:	86 18       	sub	r8, r6
 99e:	44 c0       	rjmp	.+136    	; 0xa28 <vfprintf+0x2c6>
 9a0:	85 37       	cpi	r24, 0x75	; 117
 9a2:	31 f4       	brne	.+12     	; 0x9b0 <vfprintf+0x24e>
 9a4:	23 2d       	mov	r18, r3
 9a6:	2f 7e       	andi	r18, 0xEF	; 239
 9a8:	b2 2e       	mov	r11, r18
 9aa:	2a e0       	ldi	r18, 0x0A	; 10
 9ac:	30 e0       	ldi	r19, 0x00	; 0
 9ae:	25 c0       	rjmp	.+74     	; 0x9fa <vfprintf+0x298>
 9b0:	93 2d       	mov	r25, r3
 9b2:	99 7f       	andi	r25, 0xF9	; 249
 9b4:	b9 2e       	mov	r11, r25
 9b6:	8f 36       	cpi	r24, 0x6F	; 111
 9b8:	c1 f0       	breq	.+48     	; 0x9ea <vfprintf+0x288>
 9ba:	18 f4       	brcc	.+6      	; 0x9c2 <vfprintf+0x260>
 9bc:	88 35       	cpi	r24, 0x58	; 88
 9be:	79 f0       	breq	.+30     	; 0x9de <vfprintf+0x27c>
 9c0:	ae c0       	rjmp	.+348    	; 0xb1e <vfprintf+0x3bc>
 9c2:	80 37       	cpi	r24, 0x70	; 112
 9c4:	19 f0       	breq	.+6      	; 0x9cc <vfprintf+0x26a>
 9c6:	88 37       	cpi	r24, 0x78	; 120
 9c8:	21 f0       	breq	.+8      	; 0x9d2 <vfprintf+0x270>
 9ca:	a9 c0       	rjmp	.+338    	; 0xb1e <vfprintf+0x3bc>
 9cc:	e9 2f       	mov	r30, r25
 9ce:	e0 61       	ori	r30, 0x10	; 16
 9d0:	be 2e       	mov	r11, r30
 9d2:	b4 fe       	sbrs	r11, 4
 9d4:	0d c0       	rjmp	.+26     	; 0x9f0 <vfprintf+0x28e>
 9d6:	fb 2d       	mov	r31, r11
 9d8:	f4 60       	ori	r31, 0x04	; 4
 9da:	bf 2e       	mov	r11, r31
 9dc:	09 c0       	rjmp	.+18     	; 0x9f0 <vfprintf+0x28e>
 9de:	34 fe       	sbrs	r3, 4
 9e0:	0a c0       	rjmp	.+20     	; 0x9f6 <vfprintf+0x294>
 9e2:	29 2f       	mov	r18, r25
 9e4:	26 60       	ori	r18, 0x06	; 6
 9e6:	b2 2e       	mov	r11, r18
 9e8:	06 c0       	rjmp	.+12     	; 0x9f6 <vfprintf+0x294>
 9ea:	28 e0       	ldi	r18, 0x08	; 8
 9ec:	30 e0       	ldi	r19, 0x00	; 0
 9ee:	05 c0       	rjmp	.+10     	; 0x9fa <vfprintf+0x298>
 9f0:	20 e1       	ldi	r18, 0x10	; 16
 9f2:	30 e0       	ldi	r19, 0x00	; 0
 9f4:	02 c0       	rjmp	.+4      	; 0x9fa <vfprintf+0x298>
 9f6:	20 e1       	ldi	r18, 0x10	; 16
 9f8:	32 e0       	ldi	r19, 0x02	; 2
 9fa:	f8 01       	movw	r30, r16
 9fc:	b7 fe       	sbrs	r11, 7
 9fe:	07 c0       	rjmp	.+14     	; 0xa0e <vfprintf+0x2ac>
 a00:	60 81       	ld	r22, Z
 a02:	71 81       	ldd	r23, Z+1	; 0x01
 a04:	82 81       	ldd	r24, Z+2	; 0x02
 a06:	93 81       	ldd	r25, Z+3	; 0x03
 a08:	0c 5f       	subi	r16, 0xFC	; 252
 a0a:	1f 4f       	sbci	r17, 0xFF	; 255
 a0c:	06 c0       	rjmp	.+12     	; 0xa1a <vfprintf+0x2b8>
 a0e:	60 81       	ld	r22, Z
 a10:	71 81       	ldd	r23, Z+1	; 0x01
 a12:	80 e0       	ldi	r24, 0x00	; 0
 a14:	90 e0       	ldi	r25, 0x00	; 0
 a16:	0e 5f       	subi	r16, 0xFE	; 254
 a18:	1f 4f       	sbci	r17, 0xFF	; 255
 a1a:	a3 01       	movw	r20, r6
 a1c:	f1 d0       	rcall	.+482    	; 0xc00 <__ultoa_invert>
 a1e:	88 2e       	mov	r8, r24
 a20:	86 18       	sub	r8, r6
 a22:	fb 2d       	mov	r31, r11
 a24:	ff 77       	andi	r31, 0x7F	; 127
 a26:	3f 2e       	mov	r3, r31
 a28:	36 fe       	sbrs	r3, 6
 a2a:	0d c0       	rjmp	.+26     	; 0xa46 <vfprintf+0x2e4>
 a2c:	23 2d       	mov	r18, r3
 a2e:	2e 7f       	andi	r18, 0xFE	; 254
 a30:	a2 2e       	mov	r10, r18
 a32:	89 14       	cp	r8, r9
 a34:	58 f4       	brcc	.+22     	; 0xa4c <vfprintf+0x2ea>
 a36:	34 fe       	sbrs	r3, 4
 a38:	0b c0       	rjmp	.+22     	; 0xa50 <vfprintf+0x2ee>
 a3a:	32 fc       	sbrc	r3, 2
 a3c:	09 c0       	rjmp	.+18     	; 0xa50 <vfprintf+0x2ee>
 a3e:	83 2d       	mov	r24, r3
 a40:	8e 7e       	andi	r24, 0xEE	; 238
 a42:	a8 2e       	mov	r10, r24
 a44:	05 c0       	rjmp	.+10     	; 0xa50 <vfprintf+0x2ee>
 a46:	b8 2c       	mov	r11, r8
 a48:	a3 2c       	mov	r10, r3
 a4a:	03 c0       	rjmp	.+6      	; 0xa52 <vfprintf+0x2f0>
 a4c:	b8 2c       	mov	r11, r8
 a4e:	01 c0       	rjmp	.+2      	; 0xa52 <vfprintf+0x2f0>
 a50:	b9 2c       	mov	r11, r9
 a52:	a4 fe       	sbrs	r10, 4
 a54:	0f c0       	rjmp	.+30     	; 0xa74 <vfprintf+0x312>
 a56:	fe 01       	movw	r30, r28
 a58:	e8 0d       	add	r30, r8
 a5a:	f1 1d       	adc	r31, r1
 a5c:	80 81       	ld	r24, Z
 a5e:	80 33       	cpi	r24, 0x30	; 48
 a60:	21 f4       	brne	.+8      	; 0xa6a <vfprintf+0x308>
 a62:	9a 2d       	mov	r25, r10
 a64:	99 7e       	andi	r25, 0xE9	; 233
 a66:	a9 2e       	mov	r10, r25
 a68:	09 c0       	rjmp	.+18     	; 0xa7c <vfprintf+0x31a>
 a6a:	a2 fe       	sbrs	r10, 2
 a6c:	06 c0       	rjmp	.+12     	; 0xa7a <vfprintf+0x318>
 a6e:	b3 94       	inc	r11
 a70:	b3 94       	inc	r11
 a72:	04 c0       	rjmp	.+8      	; 0xa7c <vfprintf+0x31a>
 a74:	8a 2d       	mov	r24, r10
 a76:	86 78       	andi	r24, 0x86	; 134
 a78:	09 f0       	breq	.+2      	; 0xa7c <vfprintf+0x31a>
 a7a:	b3 94       	inc	r11
 a7c:	a3 fc       	sbrc	r10, 3
 a7e:	10 c0       	rjmp	.+32     	; 0xaa0 <vfprintf+0x33e>
 a80:	a0 fe       	sbrs	r10, 0
 a82:	06 c0       	rjmp	.+12     	; 0xa90 <vfprintf+0x32e>
 a84:	b2 14       	cp	r11, r2
 a86:	80 f4       	brcc	.+32     	; 0xaa8 <vfprintf+0x346>
 a88:	28 0c       	add	r2, r8
 a8a:	92 2c       	mov	r9, r2
 a8c:	9b 18       	sub	r9, r11
 a8e:	0d c0       	rjmp	.+26     	; 0xaaa <vfprintf+0x348>
 a90:	b2 14       	cp	r11, r2
 a92:	58 f4       	brcc	.+22     	; 0xaaa <vfprintf+0x348>
 a94:	b6 01       	movw	r22, r12
 a96:	80 e2       	ldi	r24, 0x20	; 32
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	76 d0       	rcall	.+236    	; 0xb88 <fputc>
 a9c:	b3 94       	inc	r11
 a9e:	f8 cf       	rjmp	.-16     	; 0xa90 <vfprintf+0x32e>
 aa0:	b2 14       	cp	r11, r2
 aa2:	18 f4       	brcc	.+6      	; 0xaaa <vfprintf+0x348>
 aa4:	2b 18       	sub	r2, r11
 aa6:	02 c0       	rjmp	.+4      	; 0xaac <vfprintf+0x34a>
 aa8:	98 2c       	mov	r9, r8
 aaa:	21 2c       	mov	r2, r1
 aac:	a4 fe       	sbrs	r10, 4
 aae:	0f c0       	rjmp	.+30     	; 0xace <vfprintf+0x36c>
 ab0:	b6 01       	movw	r22, r12
 ab2:	80 e3       	ldi	r24, 0x30	; 48
 ab4:	90 e0       	ldi	r25, 0x00	; 0
 ab6:	68 d0       	rcall	.+208    	; 0xb88 <fputc>
 ab8:	a2 fe       	sbrs	r10, 2
 aba:	16 c0       	rjmp	.+44     	; 0xae8 <vfprintf+0x386>
 abc:	a1 fc       	sbrc	r10, 1
 abe:	03 c0       	rjmp	.+6      	; 0xac6 <vfprintf+0x364>
 ac0:	88 e7       	ldi	r24, 0x78	; 120
 ac2:	90 e0       	ldi	r25, 0x00	; 0
 ac4:	02 c0       	rjmp	.+4      	; 0xaca <vfprintf+0x368>
 ac6:	88 e5       	ldi	r24, 0x58	; 88
 ac8:	90 e0       	ldi	r25, 0x00	; 0
 aca:	b6 01       	movw	r22, r12
 acc:	0c c0       	rjmp	.+24     	; 0xae6 <vfprintf+0x384>
 ace:	8a 2d       	mov	r24, r10
 ad0:	86 78       	andi	r24, 0x86	; 134
 ad2:	51 f0       	breq	.+20     	; 0xae8 <vfprintf+0x386>
 ad4:	a1 fe       	sbrs	r10, 1
 ad6:	02 c0       	rjmp	.+4      	; 0xadc <vfprintf+0x37a>
 ad8:	8b e2       	ldi	r24, 0x2B	; 43
 ada:	01 c0       	rjmp	.+2      	; 0xade <vfprintf+0x37c>
 adc:	80 e2       	ldi	r24, 0x20	; 32
 ade:	a7 fc       	sbrc	r10, 7
 ae0:	8d e2       	ldi	r24, 0x2D	; 45
 ae2:	b6 01       	movw	r22, r12
 ae4:	90 e0       	ldi	r25, 0x00	; 0
 ae6:	50 d0       	rcall	.+160    	; 0xb88 <fputc>
 ae8:	89 14       	cp	r8, r9
 aea:	30 f4       	brcc	.+12     	; 0xaf8 <vfprintf+0x396>
 aec:	b6 01       	movw	r22, r12
 aee:	80 e3       	ldi	r24, 0x30	; 48
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	4a d0       	rcall	.+148    	; 0xb88 <fputc>
 af4:	9a 94       	dec	r9
 af6:	f8 cf       	rjmp	.-16     	; 0xae8 <vfprintf+0x386>
 af8:	8a 94       	dec	r8
 afa:	f3 01       	movw	r30, r6
 afc:	e8 0d       	add	r30, r8
 afe:	f1 1d       	adc	r31, r1
 b00:	80 81       	ld	r24, Z
 b02:	b6 01       	movw	r22, r12
 b04:	90 e0       	ldi	r25, 0x00	; 0
 b06:	40 d0       	rcall	.+128    	; 0xb88 <fputc>
 b08:	81 10       	cpse	r8, r1
 b0a:	f6 cf       	rjmp	.-20     	; 0xaf8 <vfprintf+0x396>
 b0c:	22 20       	and	r2, r2
 b0e:	09 f4       	brne	.+2      	; 0xb12 <vfprintf+0x3b0>
 b10:	4e ce       	rjmp	.-868    	; 0x7ae <vfprintf+0x4c>
 b12:	b6 01       	movw	r22, r12
 b14:	80 e2       	ldi	r24, 0x20	; 32
 b16:	90 e0       	ldi	r25, 0x00	; 0
 b18:	37 d0       	rcall	.+110    	; 0xb88 <fputc>
 b1a:	2a 94       	dec	r2
 b1c:	f7 cf       	rjmp	.-18     	; 0xb0c <vfprintf+0x3aa>
 b1e:	f6 01       	movw	r30, r12
 b20:	86 81       	ldd	r24, Z+6	; 0x06
 b22:	97 81       	ldd	r25, Z+7	; 0x07
 b24:	02 c0       	rjmp	.+4      	; 0xb2a <vfprintf+0x3c8>
 b26:	8f ef       	ldi	r24, 0xFF	; 255
 b28:	9f ef       	ldi	r25, 0xFF	; 255
 b2a:	2b 96       	adiw	r28, 0x0b	; 11
 b2c:	0f b6       	in	r0, 0x3f	; 63
 b2e:	f8 94       	cli
 b30:	de bf       	out	0x3e, r29	; 62
 b32:	0f be       	out	0x3f, r0	; 63
 b34:	cd bf       	out	0x3d, r28	; 61
 b36:	df 91       	pop	r29
 b38:	cf 91       	pop	r28
 b3a:	1f 91       	pop	r17
 b3c:	0f 91       	pop	r16
 b3e:	ff 90       	pop	r15
 b40:	ef 90       	pop	r14
 b42:	df 90       	pop	r13
 b44:	cf 90       	pop	r12
 b46:	bf 90       	pop	r11
 b48:	af 90       	pop	r10
 b4a:	9f 90       	pop	r9
 b4c:	8f 90       	pop	r8
 b4e:	7f 90       	pop	r7
 b50:	6f 90       	pop	r6
 b52:	5f 90       	pop	r5
 b54:	4f 90       	pop	r4
 b56:	3f 90       	pop	r3
 b58:	2f 90       	pop	r2
 b5a:	08 95       	ret

00000b5c <strnlen_P>:
 b5c:	fc 01       	movw	r30, r24
 b5e:	05 90       	lpm	r0, Z+
 b60:	61 50       	subi	r22, 0x01	; 1
 b62:	70 40       	sbci	r23, 0x00	; 0
 b64:	01 10       	cpse	r0, r1
 b66:	d8 f7       	brcc	.-10     	; 0xb5e <strnlen_P+0x2>
 b68:	80 95       	com	r24
 b6a:	90 95       	com	r25
 b6c:	8e 0f       	add	r24, r30
 b6e:	9f 1f       	adc	r25, r31
 b70:	08 95       	ret

00000b72 <strnlen>:
 b72:	fc 01       	movw	r30, r24
 b74:	61 50       	subi	r22, 0x01	; 1
 b76:	70 40       	sbci	r23, 0x00	; 0
 b78:	01 90       	ld	r0, Z+
 b7a:	01 10       	cpse	r0, r1
 b7c:	d8 f7       	brcc	.-10     	; 0xb74 <strnlen+0x2>
 b7e:	80 95       	com	r24
 b80:	90 95       	com	r25
 b82:	8e 0f       	add	r24, r30
 b84:	9f 1f       	adc	r25, r31
 b86:	08 95       	ret

00000b88 <fputc>:
 b88:	0f 93       	push	r16
 b8a:	1f 93       	push	r17
 b8c:	cf 93       	push	r28
 b8e:	df 93       	push	r29
 b90:	fb 01       	movw	r30, r22
 b92:	23 81       	ldd	r18, Z+3	; 0x03
 b94:	21 fd       	sbrc	r18, 1
 b96:	03 c0       	rjmp	.+6      	; 0xb9e <fputc+0x16>
 b98:	8f ef       	ldi	r24, 0xFF	; 255
 b9a:	9f ef       	ldi	r25, 0xFF	; 255
 b9c:	2c c0       	rjmp	.+88     	; 0xbf6 <fputc+0x6e>
 b9e:	22 ff       	sbrs	r18, 2
 ba0:	16 c0       	rjmp	.+44     	; 0xbce <fputc+0x46>
 ba2:	46 81       	ldd	r20, Z+6	; 0x06
 ba4:	57 81       	ldd	r21, Z+7	; 0x07
 ba6:	24 81       	ldd	r18, Z+4	; 0x04
 ba8:	35 81       	ldd	r19, Z+5	; 0x05
 baa:	42 17       	cp	r20, r18
 bac:	53 07       	cpc	r21, r19
 bae:	44 f4       	brge	.+16     	; 0xbc0 <fputc+0x38>
 bb0:	a0 81       	ld	r26, Z
 bb2:	b1 81       	ldd	r27, Z+1	; 0x01
 bb4:	9d 01       	movw	r18, r26
 bb6:	2f 5f       	subi	r18, 0xFF	; 255
 bb8:	3f 4f       	sbci	r19, 0xFF	; 255
 bba:	31 83       	std	Z+1, r19	; 0x01
 bbc:	20 83       	st	Z, r18
 bbe:	8c 93       	st	X, r24
 bc0:	26 81       	ldd	r18, Z+6	; 0x06
 bc2:	37 81       	ldd	r19, Z+7	; 0x07
 bc4:	2f 5f       	subi	r18, 0xFF	; 255
 bc6:	3f 4f       	sbci	r19, 0xFF	; 255
 bc8:	37 83       	std	Z+7, r19	; 0x07
 bca:	26 83       	std	Z+6, r18	; 0x06
 bcc:	14 c0       	rjmp	.+40     	; 0xbf6 <fputc+0x6e>
 bce:	8b 01       	movw	r16, r22
 bd0:	ec 01       	movw	r28, r24
 bd2:	fb 01       	movw	r30, r22
 bd4:	00 84       	ldd	r0, Z+8	; 0x08
 bd6:	f1 85       	ldd	r31, Z+9	; 0x09
 bd8:	e0 2d       	mov	r30, r0
 bda:	09 95       	icall
 bdc:	89 2b       	or	r24, r25
 bde:	e1 f6       	brne	.-72     	; 0xb98 <fputc+0x10>
 be0:	d8 01       	movw	r26, r16
 be2:	16 96       	adiw	r26, 0x06	; 6
 be4:	8d 91       	ld	r24, X+
 be6:	9c 91       	ld	r25, X
 be8:	17 97       	sbiw	r26, 0x07	; 7
 bea:	01 96       	adiw	r24, 0x01	; 1
 bec:	17 96       	adiw	r26, 0x07	; 7
 bee:	9c 93       	st	X, r25
 bf0:	8e 93       	st	-X, r24
 bf2:	16 97       	sbiw	r26, 0x06	; 6
 bf4:	ce 01       	movw	r24, r28
 bf6:	df 91       	pop	r29
 bf8:	cf 91       	pop	r28
 bfa:	1f 91       	pop	r17
 bfc:	0f 91       	pop	r16
 bfe:	08 95       	ret

00000c00 <__ultoa_invert>:
 c00:	fa 01       	movw	r30, r20
 c02:	aa 27       	eor	r26, r26
 c04:	28 30       	cpi	r18, 0x08	; 8
 c06:	51 f1       	breq	.+84     	; 0xc5c <__ultoa_invert+0x5c>
 c08:	20 31       	cpi	r18, 0x10	; 16
 c0a:	81 f1       	breq	.+96     	; 0xc6c <__ultoa_invert+0x6c>
 c0c:	e8 94       	clt
 c0e:	6f 93       	push	r22
 c10:	6e 7f       	andi	r22, 0xFE	; 254
 c12:	6e 5f       	subi	r22, 0xFE	; 254
 c14:	7f 4f       	sbci	r23, 0xFF	; 255
 c16:	8f 4f       	sbci	r24, 0xFF	; 255
 c18:	9f 4f       	sbci	r25, 0xFF	; 255
 c1a:	af 4f       	sbci	r26, 0xFF	; 255
 c1c:	b1 e0       	ldi	r27, 0x01	; 1
 c1e:	3e d0       	rcall	.+124    	; 0xc9c <__ultoa_invert+0x9c>
 c20:	b4 e0       	ldi	r27, 0x04	; 4
 c22:	3c d0       	rcall	.+120    	; 0xc9c <__ultoa_invert+0x9c>
 c24:	67 0f       	add	r22, r23
 c26:	78 1f       	adc	r23, r24
 c28:	89 1f       	adc	r24, r25
 c2a:	9a 1f       	adc	r25, r26
 c2c:	a1 1d       	adc	r26, r1
 c2e:	68 0f       	add	r22, r24
 c30:	79 1f       	adc	r23, r25
 c32:	8a 1f       	adc	r24, r26
 c34:	91 1d       	adc	r25, r1
 c36:	a1 1d       	adc	r26, r1
 c38:	6a 0f       	add	r22, r26
 c3a:	71 1d       	adc	r23, r1
 c3c:	81 1d       	adc	r24, r1
 c3e:	91 1d       	adc	r25, r1
 c40:	a1 1d       	adc	r26, r1
 c42:	20 d0       	rcall	.+64     	; 0xc84 <__ultoa_invert+0x84>
 c44:	09 f4       	brne	.+2      	; 0xc48 <__ultoa_invert+0x48>
 c46:	68 94       	set
 c48:	3f 91       	pop	r19
 c4a:	2a e0       	ldi	r18, 0x0A	; 10
 c4c:	26 9f       	mul	r18, r22
 c4e:	11 24       	eor	r1, r1
 c50:	30 19       	sub	r19, r0
 c52:	30 5d       	subi	r19, 0xD0	; 208
 c54:	31 93       	st	Z+, r19
 c56:	de f6       	brtc	.-74     	; 0xc0e <__ultoa_invert+0xe>
 c58:	cf 01       	movw	r24, r30
 c5a:	08 95       	ret
 c5c:	46 2f       	mov	r20, r22
 c5e:	47 70       	andi	r20, 0x07	; 7
 c60:	40 5d       	subi	r20, 0xD0	; 208
 c62:	41 93       	st	Z+, r20
 c64:	b3 e0       	ldi	r27, 0x03	; 3
 c66:	0f d0       	rcall	.+30     	; 0xc86 <__ultoa_invert+0x86>
 c68:	c9 f7       	brne	.-14     	; 0xc5c <__ultoa_invert+0x5c>
 c6a:	f6 cf       	rjmp	.-20     	; 0xc58 <__ultoa_invert+0x58>
 c6c:	46 2f       	mov	r20, r22
 c6e:	4f 70       	andi	r20, 0x0F	; 15
 c70:	40 5d       	subi	r20, 0xD0	; 208
 c72:	4a 33       	cpi	r20, 0x3A	; 58
 c74:	18 f0       	brcs	.+6      	; 0xc7c <__ultoa_invert+0x7c>
 c76:	49 5d       	subi	r20, 0xD9	; 217
 c78:	31 fd       	sbrc	r19, 1
 c7a:	40 52       	subi	r20, 0x20	; 32
 c7c:	41 93       	st	Z+, r20
 c7e:	02 d0       	rcall	.+4      	; 0xc84 <__ultoa_invert+0x84>
 c80:	a9 f7       	brne	.-22     	; 0xc6c <__ultoa_invert+0x6c>
 c82:	ea cf       	rjmp	.-44     	; 0xc58 <__ultoa_invert+0x58>
 c84:	b4 e0       	ldi	r27, 0x04	; 4
 c86:	a6 95       	lsr	r26
 c88:	97 95       	ror	r25
 c8a:	87 95       	ror	r24
 c8c:	77 95       	ror	r23
 c8e:	67 95       	ror	r22
 c90:	ba 95       	dec	r27
 c92:	c9 f7       	brne	.-14     	; 0xc86 <__ultoa_invert+0x86>
 c94:	00 97       	sbiw	r24, 0x00	; 0
 c96:	61 05       	cpc	r22, r1
 c98:	71 05       	cpc	r23, r1
 c9a:	08 95       	ret
 c9c:	9b 01       	movw	r18, r22
 c9e:	ac 01       	movw	r20, r24
 ca0:	0a 2e       	mov	r0, r26
 ca2:	06 94       	lsr	r0
 ca4:	57 95       	ror	r21
 ca6:	47 95       	ror	r20
 ca8:	37 95       	ror	r19
 caa:	27 95       	ror	r18
 cac:	ba 95       	dec	r27
 cae:	c9 f7       	brne	.-14     	; 0xca2 <__ultoa_invert+0xa2>
 cb0:	62 0f       	add	r22, r18
 cb2:	73 1f       	adc	r23, r19
 cb4:	84 1f       	adc	r24, r20
 cb6:	95 1f       	adc	r25, r21
 cb8:	a0 1d       	adc	r26, r0
 cba:	08 95       	ret

00000cbc <_exit>:
 cbc:	f8 94       	cli

00000cbe <__stop_program>:
 cbe:	ff cf       	rjmp	.-2      	; 0xcbe <__stop_program>
